{
    "location": "dijit/_TemplatedMixin",
    "type": "constructor",
    "classlike": true,
    "superclass": "dijit/_AttachMixin",
    "mixins": [
        "dijit/_AttachMixin"
    ],
    "parameters": [
        {
            "name": "params",
            "types": [
                "Object",
                "null"
            ],
            "usage": "required",
            "summary": "<p>Hash of initialization parameters for widget, including scalar values (like title, duration etc.)\nand functions, typically callbacks like onClick.\nThe hash can contain any of the widget&#39;s properties, excluding read-only properties.</p>\n"
        },
        {
            "name": "srcNodeRef",
            "types": [
                "DOMNode",
                "String"
            ],
            "usage": "optional",
            "summary": "<p>If a srcNodeRef (DOM node) is specified, replace srcNodeRef with my generated DOM tree.</p>\n"
        }
    ],
    "returnTypes": [],
    "summary": "<p>Mixin for widgets that are instantiated from a template</p>\n",
    "properties": [
        {
            "name": "_attachEvents",
            "scope": "prototype",
            "types": [
                "Handle[]"
            ],
            "from": "dijit/_AttachMixin",
            "private": true,
            "tags": [
                "private"
            ],
            "summary": "<p>List of connections associated with data-dojo-attach-event=... in the\ntemplate</p>\n"
        },
        {
            "name": "_attachPoints",
            "scope": "prototype",
            "types": [
                "String[]"
            ],
            "from": "dijit/_AttachMixin",
            "private": true,
            "tags": [
                "private"
            ],
            "summary": "<p>List of widget attribute names associated with data-dojo-attach-point=... in the\ntemplate, ex: [&quot;containerNode&quot;, &quot;labelNode&quot;]</p>\n"
        },
        {
            "name": "_rendered",
            "scope": "prototype",
            "types": [
                "Boolean"
            ],
            "from": "dijit/_TemplatedMixin",
            "private": true,
            "summary": "<p>Not normally use, but this flag can be set by the app if the server has already rendered the template,\ni.e. already inlining the template for the widget into the main page.   Reduces _TemplatedMixin to\njust function like _AttachMixin.</p>\n"
        },
        {
            "name": "_skipNodeCache",
            "scope": "prototype",
            "types": [
                "boolean"
            ],
            "from": "dijit/_TemplatedMixin",
            "private": true
        },
        {
            "name": "_templateCache",
            "scope": "normal",
            "types": [
                "object"
            ],
            "from": "dijit/_TemplatedMixin",
            "private": true
        },
        {
            "name": "attachScope",
            "scope": "prototype",
            "types": [
                "Object"
            ],
            "from": "dijit/_AttachMixin",
            "tags": [
                "public"
            ],
            "summary": "<p>Object to which attach points and events will be scoped.  Defaults\nto &#39;this&#39;.</p>\n"
        },
        {
            "name": "searchContainerNode",
            "scope": "prototype",
            "types": [
                "boolean"
            ],
            "from": "dijit/_TemplatedMixin"
        },
        {
            "name": "templatePath",
            "scope": "prototype",
            "types": [
                "String"
            ],
            "from": "dijit/_TemplatedMixin",
            "tags": [
                "deprecated",
                "protected"
            ],
            "summary": "<p>Path to template (HTML file) for this widget relative to dojo.baseUrl.\nDeprecated: use templateString with require([... &quot;dojo/text!...&quot;], ...) instead</p>\n"
        },
        {
            "name": "templateString",
            "scope": "prototype",
            "types": [
                "String"
            ],
            "from": "dijit/_TemplatedMixin",
            "tags": [
                "protected"
            ],
            "summary": "<p>A string that represents the widget template.\nUse in conjunction with dojo.cache() to load from a file.</p>\n"
        }
    ],
    "methods": [
        {
            "name": "_attach",
            "scope": "prototype",
            "types": [
                "function"
            ],
            "from": "dijit/_AttachMixin",
            "private": true,
            "parameters": [
                {
                    "name": "node",
                    "types": [
                        "DOMNode"
                    ],
                    "usage": "required",
                    "summary": "<p>The node to setup a listener on.</p>\n"
                },
                {
                    "name": "type",
                    "types": [
                        "String"
                    ],
                    "usage": "required",
                    "summary": "<p>Event name like &quot;click&quot;.</p>\n"
                },
                {
                    "name": "func",
                    "types": [
                        "undefined"
                    ],
                    "usage": "required"
                }
            ],
            "returnTypes": [
                "undefined"
            ],
            "summary": "<p>Roughly corresponding to dojo/on, this is the default function for processing a\ndata-dojo-attach-event.  Meant to attach to DOMNodes, not to widgets.</p>\n"
        },
        {
            "name": "_attachTemplateNodes",
            "scope": "prototype",
            "types": [
                "function"
            ],
            "from": "dijit/_AttachMixin",
            "private": true,
            "tags": [
                "private"
            ],
            "parameters": [
                {
                    "name": "rootNode",
                    "types": [
                        "DomNode"
                    ],
                    "usage": "required",
                    "summary": "<p>The node to search for properties. All descendants will be searched.</p>\n"
                }
            ],
            "returnTypes": [],
            "summary": "<p>Iterate through the dom nodes and attach functions and nodes accordingly.</p>\n",
            "description": "<p>Map widget properties and functions to the handlers specified in\nthe dom node and it&#39;s descendants. This function iterates over all\nnodes and looks for these properties:\n\n</p>\n<ul>\n<li>dojoAttachPoint/data-dojo-attach-point</li>\n<li>dojoAttachEvent/data-dojo-attach-event</li>\n</ul>\n"
        },
        {
            "name": "_beforeFillContent",
            "scope": "prototype",
            "types": [
                "function"
            ],
            "from": "dijit/_AttachMixin",
            "private": true,
            "parameters": [],
            "returnTypes": []
        },
        {
            "name": "_detachTemplateNodes",
            "scope": "prototype",
            "types": [
                "function"
            ],
            "from": "dijit/_AttachMixin",
            "private": true,
            "parameters": [],
            "returnTypes": [],
            "summary": "<p>Detach and clean up the attachments made in _attachtempalteNodes.</p>\n"
        },
        {
            "name": "_fillContent",
            "scope": "prototype",
            "types": [
                "function"
            ],
            "from": "dijit/_TemplatedMixin",
            "private": true,
            "tags": [
                "protected"
            ],
            "parameters": [
                {
                    "name": "source",
                    "types": [
                        "DomNode"
                    ],
                    "usage": "required"
                }
            ],
            "returnTypes": [],
            "summary": "<p>Relocate source contents to templated container node.\nthis.containerNode must be able to receive children, or exceptions will be thrown.</p>\n"
        },
        {
            "name": "_processTemplateNode",
            "scope": "prototype",
            "types": [
                "function"
            ],
            "from": "dijit/_AttachMixin",
            "private": true,
            "parameters": [
                {
                    "name": "baseNode",
                    "types": [
                        "DOMNode",
                        "Widget"
                    ],
                    "usage": "required"
                },
                {
                    "name": "getAttrFunc",
                    "types": [
                        "Function"
                    ],
                    "usage": "required",
                    "summary": "<p>Function to get the specified property for a given DomNode/Widget.</p>\n"
                },
                {
                    "name": "attachFunc",
                    "types": [
                        "Function"
                    ],
                    "usage": "optional",
                    "summary": "<p>Attaches an event handler from the specified node/widget to specified function.</p>\n"
                }
            ],
            "returnTypes": [
                "boolean"
            ],
            "summary": "<p>Process data-dojo-attach-point and data-dojo-attach-event for given node or widget.\nReturns true if caller should process baseNode&#39;s children too.</p>\n"
        },
        {
            "name": "_stringRepl",
            "scope": "prototype",
            "types": [
                "function"
            ],
            "from": "dijit/_TemplatedMixin",
            "private": true,
            "tags": [
                "private"
            ],
            "parameters": [
                {
                    "name": "tmpl",
                    "types": [
                        "undefined"
                    ],
                    "usage": "required"
                }
            ],
            "returnTypes": [
                "undefined"
            ],
            "summary": "<p>Does substitution of ${foo} type properties in template string</p>\n"
        },
        {
            "name": "buildRendering",
            "scope": "prototype",
            "types": [
                "function"
            ],
            "from": "dijit/_TemplatedMixin",
            "tags": [
                "protected"
            ],
            "parameters": [],
            "returnTypes": [],
            "summary": "<p>Construct the UI for this widget from a template, setting this.domNode.</p>\n"
        },
        {
            "name": "constructor",
            "scope": "prototype",
            "types": [
                "function"
            ],
            "from": "dijit/_AttachMixin",
            "parameters": [
                {
                    "name": "params",
                    "types": [
                        "Object",
                        "null"
                    ],
                    "usage": "required",
                    "summary": "<p>Hash of initialization parameters for widget, including scalar values (like title, duration etc.)\nand functions, typically callbacks like onClick.\nThe hash can contain any of the widget&#39;s properties, excluding read-only properties.</p>\n"
                },
                {
                    "name": "srcNodeRef",
                    "types": [
                        "DOMNode",
                        "String"
                    ],
                    "usage": "optional",
                    "summary": "<p>If a srcNodeRef (DOM node) is specified, replace srcNodeRef with my generated DOM tree.</p>\n"
                }
            ],
            "returnTypes": [],
            "summary": "<p>Create the widget.</p>\n"
        },
        {
            "name": "destroyRendering",
            "scope": "prototype",
            "types": [
                "function"
            ],
            "from": "dijit/_AttachMixin",
            "parameters": [],
            "returnTypes": []
        },
        {
            "name": "getCachedTemplate",
            "scope": "normal",
            "types": [
                "function"
            ],
            "from": "dijit/_TemplatedMixin",
            "parameters": [
                {
                    "name": "templateString",
                    "types": [
                        "String"
                    ],
                    "usage": "required",
                    "summary": "<p>The template</p>\n"
                },
                {
                    "name": "alwaysUseString",
                    "types": [
                        "Boolean"
                    ],
                    "usage": "required",
                    "summary": "<p>Don&#39;t cache the DOM tree for this template, even if it doesn&#39;t have any variables</p>\n"
                },
                {
                    "name": "doc",
                    "types": [
                        "Document"
                    ],
                    "usage": "optional",
                    "summary": "<p>The target document.   Defaults to document global if unspecified.</p>\n"
                }
            ],
            "returnTypes": [
                "Mixed"
            ],
            "returnDescription": "<p>Either string (if there are ${} variables that need to be replaced) or just\na DOM tree (if the node can be cloned directly)</p>\n",
            "summary": "<p>Static method to get a template based on the templatePath or\ntemplateString key</p>\n"
        }
    ],
    "rootPath": "../../",
    "shortName": "_TemplatedMixin"
}