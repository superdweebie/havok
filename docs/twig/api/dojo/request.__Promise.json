{
    "location": "dojo/request.__Promise",
    "type": "constructor",
    "classlike": true,
    "superclass": "dojo/promise/Promise",
    "mixins": [
        "dojo/promise/Promise"
    ],
    "parameters": [],
    "returnTypes": [],
    "properties": [
        {
            "name": "response",
            "scope": "prototype",
            "types": [
                "dojo/promise/Promise"
            ],
            "from": "dojo/request",
            "summary": "<p>A promise resolving to an object representing\nthe response from the server.</p>\n"
        }
    ],
    "methods": [
        {
            "name": "always",
            "scope": "prototype",
            "types": [
                "function"
            ],
            "from": "dojo/promise/Promise",
            "parameters": [
                {
                    "name": "callbackOrErrback",
                    "types": [
                        "Function"
                    ],
                    "usage": "optional",
                    "summary": "<p>A function that is used both as a callback and errback.</p>\n"
                }
            ],
            "returnTypes": [
                "dojo/promise/Promise",
                "undefined"
            ],
            "returnDescription": "<p>Returns a new promise for the result of the callback/errback.</p>\n",
            "summary": "<p>Add a callback to be invoked when the promise is resolved\nor rejected.</p>\n"
        },
        {
            "name": "cancel",
            "scope": "prototype",
            "types": [
                "function"
            ],
            "from": "dojo/promise/Promise",
            "parameters": [
                {
                    "name": "reason",
                    "types": [
                        "any"
                    ],
                    "usage": "required",
                    "summary": "<p>A message that may be sent to the deferred&#39;s canceler,\nexplaining why it&#39;s being canceled.</p>\n"
                },
                {
                    "name": "strict",
                    "types": [
                        "Boolean"
                    ],
                    "usage": "optional",
                    "summary": "<p>If strict, will throw an error if the deferred has already\nbeen fulfilled and consequently cannot be canceled.</p>\n"
                }
            ],
            "returnTypes": [
                "any"
            ],
            "returnDescription": "<p>Returns the rejection reason if the deferred was canceled\nnormally.</p>\n",
            "summary": "<p>Inform the deferred it may cancel its asynchronous operation.</p>\n",
            "description": "<p>Inform the deferred it may cancel its asynchronous operation.\nThe deferred&#39;s (optional) canceler is invoked and the\ndeferred will be left in a rejected state. Can affect other\npromises that originate with the same deferred.</p>\n"
        },
        {
            "name": "constructor",
            "scope": "prototype",
            "types": [
                "function"
            ],
            "from": "dojo/promise/Promise",
            "parameters": [],
            "returnTypes": [],
            "summary": "<p>The public interface to a deferred.</p>\n",
            "description": "<p>The public interface to a deferred. All promises in Dojo are\ninstances of this class.</p>\n"
        },
        {
            "name": "isCanceled",
            "scope": "prototype",
            "types": [
                "function"
            ],
            "from": "dojo/promise/Promise",
            "parameters": [],
            "returnTypes": [
                "Boolean"
            ],
            "summary": "<p>Checks whether the promise has been canceled.</p>\n"
        },
        {
            "name": "isFulfilled",
            "scope": "prototype",
            "types": [
                "function"
            ],
            "from": "dojo/promise/Promise",
            "parameters": [],
            "returnTypes": [
                "Boolean"
            ],
            "summary": "<p>Checks whether the promise has been resolved or rejected.</p>\n"
        },
        {
            "name": "isRejected",
            "scope": "prototype",
            "types": [
                "function"
            ],
            "from": "dojo/promise/Promise",
            "parameters": [],
            "returnTypes": [
                "Boolean"
            ],
            "summary": "<p>Checks whether the promise has been rejected.</p>\n"
        },
        {
            "name": "isResolved",
            "scope": "prototype",
            "types": [
                "function"
            ],
            "from": "dojo/promise/Promise",
            "parameters": [],
            "returnTypes": [
                "Boolean"
            ],
            "summary": "<p>Checks whether the promise has been resolved.</p>\n"
        },
        {
            "name": "otherwise",
            "scope": "prototype",
            "types": [
                "function"
            ],
            "from": "dojo/promise/Promise",
            "parameters": [
                {
                    "name": "errback",
                    "types": [
                        "Function"
                    ],
                    "usage": "optional",
                    "summary": "<p>Callback to be invoked when the promise is rejected.</p>\n"
                }
            ],
            "returnTypes": [
                "dojo/promise/Promise",
                "undefined"
            ],
            "returnDescription": "<p>Returns a new promise for the result of the errback.</p>\n",
            "summary": "<p>Add new errbacks to the promise.</p>\n"
        },
        {
            "name": "then",
            "scope": "prototype",
            "types": [
                "function"
            ],
            "from": "dojo/promise/Promise",
            "parameters": [
                {
                    "name": "callback",
                    "types": [
                        "Function"
                    ],
                    "usage": "optional",
                    "summary": "<p>Callback to be invoked when the promise is resolved.\nReceives the resolution value.</p>\n"
                },
                {
                    "name": "errback",
                    "types": [
                        "Function"
                    ],
                    "usage": "optional",
                    "summary": "<p>Callback to be invoked when the promise is rejected.\nReceives the rejection error.</p>\n"
                },
                {
                    "name": "progback",
                    "types": [
                        "Function"
                    ],
                    "usage": "optional",
                    "summary": "<p>Callback to be invoked when the promise emits a progress\nupdate. Receives the progress update.</p>\n"
                }
            ],
            "returnTypes": [
                "dojo/promise/Promise"
            ],
            "returnDescription": "<p>Returns a new promise for the result of the callback(s).\nThis can be used for chaining many asynchronous operations.</p>\n",
            "summary": "<p>Add new callbacks to the promise.</p>\n",
            "description": "<p>Add new callbacks to the deferred. Callbacks can be added\nbefore or after the deferred is fulfilled.</p>\n"
        },
        {
            "name": "toString",
            "scope": "prototype",
            "types": [
                "function"
            ],
            "from": "dojo/promise/Promise",
            "parameters": [],
            "returnTypes": [
                "string"
            ],
            "returnDescription": "<p>Returns <code>[object Promise]</code>.</p>\n"
        },
        {
            "name": "trace",
            "scope": "prototype",
            "types": [
                "function"
            ],
            "from": "dojo/promise/Promise",
            "parameters": [],
            "returnTypes": [
                "function"
            ]
        },
        {
            "name": "traceRejected",
            "scope": "prototype",
            "types": [
                "function"
            ],
            "from": "dojo/promise/Promise",
            "parameters": [],
            "returnTypes": [
                "function"
            ]
        }
    ],
    "rootPath": "../../",
    "shortName": "request.__Promise"
}