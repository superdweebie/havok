{
    "location": "dojo/dom-geometry",
    "type": "object",
    "summary": "<p>This module defines the core dojo DOM geometry API.</p>\n",
    "properties": [
        {
            "name": "boxModel",
            "scope": "normal",
            "types": [
                "string"
            ],
            "from": "dojo/dom-geometry"
        }
    ],
    "methods": [
        {
            "name": "docScroll",
            "scope": "normal",
            "types": [
                "function"
            ],
            "from": "dojo/dom-geometry",
            "parameters": [
                {
                    "name": "doc",
                    "types": [
                        "Document"
                    ],
                    "usage": "optional",
                    "summary": "<p>Optional document to query.   If unspecified, use win.doc.</p>\n"
                }
            ],
            "returnTypes": [
                "Object",
                "undefined"
            ],
            "summary": "<p>Returns an object with {node, x, y} with corresponding offsets.</p>\n"
        },
        {
            "name": "fixIeBiDiScrollLeft",
            "scope": "normal",
            "types": [
                "function"
            ],
            "from": "dojo/dom-geometry",
            "parameters": [
                {
                    "name": "scrollLeft",
                    "types": [
                        "Number"
                    ],
                    "usage": "required"
                },
                {
                    "name": "doc",
                    "types": [
                        "Document"
                    ],
                    "usage": "optional",
                    "summary": "<p>Optional document to query.   If unspecified, use win.doc.</p>\n"
                }
            ],
            "returnTypes": [
                "Number",
                "number"
            ],
            "summary": "<p>In RTL direction, scrollLeft should be a negative value, but IE\nreturns a positive one. All codes using documentElement.scrollLeft\nmust call this function to fix this error, otherwise the position\nwill offset to right when there is a horizontal scrollbar.</p>\n"
        },
        {
            "name": "getBorderExtents",
            "scope": "normal",
            "types": [
                "function"
            ],
            "from": "dojo/dom-geometry",
            "parameters": [
                {
                    "name": "node",
                    "types": [
                        "DOMNode"
                    ],
                    "usage": "required"
                },
                {
                    "name": "computedStyle",
                    "types": [
                        "Object"
                    ],
                    "usage": "optional",
                    "summary": "<p>This parameter accepts computed styles object.\nIf this parameter is omitted, the functions will call\ndojo.getComputedStyle to get one. It is a better way, calling\ndojo.computedStyle once, and then pass the reference to this\ncomputedStyle parameter. Wherever possible, reuse the returned\nobject of dojo/dom-style.getComputedStyle().</p>\n"
                }
            ],
            "returnTypes": [
                "object"
            ],
            "summary": "<p>returns an object with properties useful for noting the border\ndimensions.</p>\n",
            "description": "<ul>\n<li>l/t/r/b = the sum of left/top/right/bottom border (respectively)</li>\n<li>w = the sum of the left and right border</li>\n<li>h = the sum of the top and bottom border</li>\n</ul>\n<p>The w/h are used for calculating boxes.\nNormally application code will not need to invoke this\ndirectly, and will use the ...box... functions instead.</p>\n"
        },
        {
            "name": "getContentBox",
            "scope": "normal",
            "types": [
                "function"
            ],
            "from": "dojo/dom-geometry",
            "parameters": [
                {
                    "name": "node",
                    "types": [
                        "DOMNode"
                    ],
                    "usage": "required"
                },
                {
                    "name": "computedStyle",
                    "types": [
                        "Object"
                    ],
                    "usage": "optional",
                    "summary": "<p>This parameter accepts computed styles object.\nIf this parameter is omitted, the functions will call\ndojo.getComputedStyle to get one. It is a better way, calling\ndojo.computedStyle once, and then pass the reference to this\ncomputedStyle parameter. Wherever possible, reuse the returned\nobject of dojo/dom-style.getComputedStyle().</p>\n"
                }
            ],
            "returnTypes": [
                "object"
            ],
            "summary": "<p>Returns an object that encodes the width, height, left and top\npositions of the node&#39;s content box, irrespective of the\ncurrent box model.</p>\n"
        },
        {
            "name": "getIeDocumentElementOffset",
            "scope": "normal",
            "types": [
                "function"
            ],
            "from": "dojo/dom-geometry",
            "parameters": [
                {
                    "name": "doc",
                    "types": [
                        "Document"
                    ],
                    "usage": "optional",
                    "summary": "<p>Optional document to query.   If unspecified, use win.doc.</p>\n"
                }
            ],
            "returnTypes": [
                "object"
            ],
            "summary": "<p>returns the offset in x and y from the document body to the\nvisual edge of the page for IE</p>\n",
            "description": "<p>The following values in IE contain an offset:\n\n</p>\nevent.clientX\nevent.clientY\nnode.getBoundingClientRect().left\nnode.getBoundingClientRect().top\n<p>But other position related values do not contain this offset,\n\n</p>\n<p>such as node.offsetLeft, node.offsetTop, node.style.left and\nnode.style.top. The offset is always (2, 2) in LTR direction.\nWhen the body is in RTL direction, the offset counts the width\nof left scroll bar&#39;s width.  This function computes the actual\noffset.</p>\n"
        },
        {
            "name": "getMarginBox",
            "scope": "normal",
            "types": [
                "function"
            ],
            "from": "dojo/dom-geometry",
            "parameters": [
                {
                    "name": "node",
                    "types": [
                        "DOMNode"
                    ],
                    "usage": "required"
                },
                {
                    "name": "computedStyle",
                    "types": [
                        "Object"
                    ],
                    "usage": "optional",
                    "summary": "<p>This parameter accepts computed styles object.\nIf this parameter is omitted, the functions will call\ndojo.getComputedStyle to get one. It is a better way, calling\ndojo.computedStyle once, and then pass the reference to this\ncomputedStyle parameter. Wherever possible, reuse the returned\nobject of dojo/dom-style.getComputedStyle().</p>\n"
                }
            ],
            "returnTypes": [],
            "summary": "<p>returns an object that encodes the width, height, left and top\npositions of the node&#39;s margin box.</p>\n"
        },
        {
            "name": "getMarginExtents",
            "scope": "normal",
            "types": [
                "function"
            ],
            "from": "dojo/dom-geometry",
            "parameters": [
                {
                    "name": "node",
                    "types": [
                        "DOMNode"
                    ],
                    "usage": "required"
                },
                {
                    "name": "computedStyle",
                    "types": [
                        "Object"
                    ],
                    "usage": "optional",
                    "summary": "<p>This parameter accepts computed styles object.\nIf this parameter is omitted, the functions will call\ndojo.getComputedStyle to get one. It is a better way, calling\ndojo.computedStyle once, and then pass the reference to this\ncomputedStyle parameter. Wherever possible, reuse the returned\nobject of dojo/dom-style.getComputedStyle().</p>\n"
                }
            ],
            "returnTypes": [],
            "summary": "<p>returns object with properties useful for box fitting with\nregards to box margins (i.e., the outer-box).\n\n</p>\n<ul>\n<li>l/t = marginLeft, marginTop, respectively</li>\n<li>w = total width, margin inclusive</li>\n<li>h = total height, margin inclusive</li>\n</ul>\n<p>The w/h are used for calculating boxes.\nNormally application code will not need to invoke this\ndirectly, and will use the ...box... functions instead.</p>\n"
        },
        {
            "name": "getMarginSize",
            "scope": "normal",
            "types": [
                "function"
            ],
            "from": "dojo/dom-geometry",
            "parameters": [
                {
                    "name": "node",
                    "types": [
                        "DOMNode",
                        "String"
                    ],
                    "usage": "required"
                },
                {
                    "name": "computedStyle",
                    "types": [
                        "Object"
                    ],
                    "usage": "optional",
                    "summary": "<p>This parameter accepts computed styles object.\nIf this parameter is omitted, the functions will call\ndojo.getComputedStyle to get one. It is a better way, calling\ndojo.computedStyle once, and then pass the reference to this\ncomputedStyle parameter. Wherever possible, reuse the returned\nobject of dojo/dom-style.getComputedStyle().</p>\n"
                }
            ],
            "returnTypes": [],
            "summary": "<p>returns an object that encodes the width and height of\nthe node&#39;s margin box</p>\n"
        },
        {
            "name": "getPadBorderExtents",
            "scope": "normal",
            "types": [
                "function"
            ],
            "from": "dojo/dom-geometry",
            "parameters": [
                {
                    "name": "node",
                    "types": [
                        "DOMNode"
                    ],
                    "usage": "required"
                },
                {
                    "name": "computedStyle",
                    "types": [
                        "Object"
                    ],
                    "usage": "optional",
                    "summary": "<p>This parameter accepts computed styles object.\nIf this parameter is omitted, the functions will call\ndojo.getComputedStyle to get one. It is a better way, calling\ndojo.computedStyle once, and then pass the reference to this\ncomputedStyle parameter. Wherever possible, reuse the returned\nobject of dojo/dom-style.getComputedStyle().</p>\n"
                }
            ],
            "returnTypes": [
                "object"
            ],
            "summary": "<p>Returns object with properties useful for box fitting with\nregards to padding.</p>\n",
            "description": "<ul>\n<li>l/t/r/b = the sum of left/top/right/bottom padding and left/top/right/bottom border (respectively)</li>\n<li>w = the sum of the left and right padding and border</li>\n<li>h = the sum of the top and bottom padding and border</li>\n</ul>\n<p>The w/h are used for calculating boxes.\nNormally application code will not need to invoke this\ndirectly, and will use the ...box... functions instead.</p>\n"
        },
        {
            "name": "getPadExtents",
            "scope": "normal",
            "types": [
                "function"
            ],
            "from": "dojo/dom-geometry",
            "parameters": [
                {
                    "name": "node",
                    "types": [
                        "DOMNode"
                    ],
                    "usage": "required"
                },
                {
                    "name": "computedStyle",
                    "types": [
                        "Object"
                    ],
                    "usage": "optional",
                    "summary": "<p>This parameter accepts computed styles object.\nIf this parameter is omitted, the functions will call\ndojo.getComputedStyle to get one. It is a better way, calling\ndojo.computedStyle once, and then pass the reference to this\ncomputedStyle parameter. Wherever possible, reuse the returned\nobject of dojo/dom-style.getComputedStyle().</p>\n"
                }
            ],
            "returnTypes": [
                "object"
            ],
            "summary": "<p>Returns object with special values specifically useful for node\nfitting.</p>\n",
            "description": "<p>Returns an object with <code>w</code>, <code>h</code>, <code>l</code>, <code>t</code> properties:\n\n</p>\nl/t/r/b = left/top/right/bottom padding (respectively)\nw = the total of the left and right padding\nh = the total of the top and bottom padding\n<p>If &#39;node&#39; has position, l/t forms the origin for child nodes.\n\n</p>\n<p>The w/h are used for calculating boxes.\nNormally application code will not need to invoke this\ndirectly, and will use the ...box... functions instead.</p>\n"
        },
        {
            "name": "isBodyLtr",
            "scope": "normal",
            "types": [
                "function"
            ],
            "from": "dojo/dom-geometry",
            "parameters": [
                {
                    "name": "doc",
                    "types": [
                        "Document"
                    ],
                    "usage": "optional",
                    "summary": "<p>Optional document to query.   If unspecified, use win.doc.</p>\n"
                }
            ],
            "returnTypes": [
                "Boolean",
                "boolean"
            ],
            "summary": "<p>Returns true if the current language is left-to-right, and false otherwise.</p>\n"
        },
        {
            "name": "normalizeEvent",
            "scope": "normal",
            "types": [
                "function"
            ],
            "from": "dojo/dom-geometry",
            "parameters": [
                {
                    "name": "event",
                    "types": [
                        "Object"
                    ],
                    "usage": "required"
                }
            ],
            "returnTypes": [],
            "summary": "<p>Normalizes the geometry of a DOM event, normalizing the pageX, pageY,\noffsetX, offsetY, layerX, and layerX properties</p>\n"
        },
        {
            "name": "position",
            "scope": "normal",
            "types": [
                "function"
            ],
            "from": "dojo/dom-geometry",
            "parameters": [
                {
                    "name": "node",
                    "types": [
                        "DOMNode",
                        "String"
                    ],
                    "usage": "required"
                },
                {
                    "name": "includeScroll",
                    "types": [
                        "Boolean"
                    ],
                    "usage": "optional"
                }
            ],
            "returnTypes": [
                "Object",
                "object"
            ],
            "summary": "<p>Gets the position and size of the passed element relative to\nthe viewport (if includeScroll==false), or relative to the\ndocument root (if includeScroll==true).\n</p>\n",
            "description": "<p>Returns an object of the form:\n<code>{ x: 100, y: 300, w: 20, h: 15 }</code>.\nIf includeScroll==true, the x and y values will include any\ndocument offsets that may affect the position relative to the\nviewport.\nUses the border-box model (inclusive of border and padding but\nnot margin).  Does not act as a setter.</p>\n"
        },
        {
            "name": "setContentSize",
            "scope": "normal",
            "types": [
                "function"
            ],
            "from": "dojo/dom-geometry",
            "parameters": [
                {
                    "name": "node",
                    "types": [
                        "DOMNode"
                    ],
                    "usage": "required"
                },
                {
                    "name": "box",
                    "types": [
                        "Object"
                    ],
                    "usage": "required",
                    "summary": "<p>hash with optional &quot;w&quot;, and &quot;h&quot; properties for &quot;width&quot;, and &quot;height&quot;\nrespectively. All specified properties should have numeric values in whole pixels.</p>\n"
                },
                {
                    "name": "computedStyle",
                    "types": [
                        "Object"
                    ],
                    "usage": "optional",
                    "summary": "<p>This parameter accepts computed styles object.\nIf this parameter is omitted, the functions will call\ndojo.getComputedStyle to get one. It is a better way, calling\ndojo.computedStyle once, and then pass the reference to this\ncomputedStyle parameter. Wherever possible, reuse the returned\nobject of dojo/dom-style.getComputedStyle().</p>\n"
                }
            ],
            "returnTypes": [],
            "summary": "<p>Sets the size of the node&#39;s contents, irrespective of margins,\npadding, or borders.</p>\n"
        },
        {
            "name": "setMarginBox",
            "scope": "normal",
            "types": [
                "function"
            ],
            "from": "dojo/dom-geometry",
            "parameters": [
                {
                    "name": "node",
                    "types": [
                        "DOMNode"
                    ],
                    "usage": "required"
                },
                {
                    "name": "box",
                    "types": [
                        "Object"
                    ],
                    "usage": "required",
                    "summary": "<p>hash with optional &quot;l&quot;, &quot;t&quot;, &quot;w&quot;, and &quot;h&quot; properties for &quot;left&quot;, &quot;right&quot;, &quot;width&quot;, and &quot;height&quot;\nrespectively. All specified properties should have numeric values in whole pixels.</p>\n"
                },
                {
                    "name": "computedStyle",
                    "types": [
                        "Object"
                    ],
                    "usage": "optional",
                    "summary": "<p>This parameter accepts computed styles object.\nIf this parameter is omitted, the functions will call\ndojo.getComputedStyle to get one. It is a better way, calling\ndojo.computedStyle once, and then pass the reference to this\ncomputedStyle parameter. Wherever possible, reuse the returned\nobject of dojo/dom-style.getComputedStyle().</p>\n"
                }
            ],
            "returnTypes": [],
            "summary": "<p>sets the size of the node&#39;s margin box and placement\n(left/top), irrespective of box model. Think of it as a\npassthrough to setBox that handles box-model vagaries for\nyou.</p>\n"
        }
    ],
    "rootPath": "../../",
    "shortName": "dom-geometry"
}