{
    "location": "dojo/_base/connect",
    "type": "object",
    "summary": "<p>This module defines the dojo.connect API.\nThis modules also provides keyboard event handling helpers.\nThis module exports an extension event for emulating Firefox&#39;s keypress handling.\nHowever, this extension event exists primarily for backwards compatibility and\nis not recommended. WebKit and IE uses an alternate keypress handling (only\nfiring for printable characters, to distinguish from keydown events), and most\nconsider the WebKit/IE behavior more desirable.</p>\n",
    "methods": [
        {
            "name": "_keypress",
            "scope": "normal",
            "types": [
                "function"
            ],
            "from": "dojo/_base/connect",
            "private": true,
            "parameters": [
                {
                    "name": "object",
                    "types": [
                        "undefined"
                    ],
                    "usage": "required"
                },
                {
                    "name": "listener",
                    "types": [
                        "undefined"
                    ],
                    "usage": "required"
                }
            ],
            "returnTypes": [
                "undefined"
            ]
        },
        {
            "name": "connect",
            "scope": "normal",
            "types": [
                "function"
            ],
            "from": "dojo/_base/connect",
            "parameters": [
                {
                    "name": "obj",
                    "types": [
                        "Object"
                    ],
                    "usage": "optional",
                    "summary": "<p>The source object for the event function.\nDefaults to <code>kernel.global</code> if null.\nIf obj is a DOM node, the connection is delegated\nto the DOM event manager (unless dontFix is true).\n</p>\n"
                },
                {
                    "name": "event",
                    "types": [
                        "String"
                    ],
                    "usage": "required",
                    "summary": "<p>String name of the event function in obj.\nI.e. identifies a property <code>obj[event]</code>.\n</p>\n"
                },
                {
                    "name": "context",
                    "types": [
                        "Object",
                        "null"
                    ],
                    "usage": "required",
                    "summary": "<p>The object that method will receive as &quot;this&quot;.\n\n</p>\n<p>If context is null and method is a function, then method\ninherits the context of event.\n\n</p>\n<p>If method is a string then context must be the source\nobject object for method (context[method]). If context is null,\nkernel.global is used.\n</p>\n"
                },
                {
                    "name": "method",
                    "types": [
                        "String",
                        "Function"
                    ],
                    "usage": "required",
                    "summary": "<p>A function reference, or name of a function in context.\nThe function identified by method fires after event does.\nmethod receives the same arguments as the event.\nSee context argument comments for information on method&#39;s scope.\n</p>\n"
                },
                {
                    "name": "dontFix",
                    "types": [
                        "Boolean"
                    ],
                    "usage": "optional",
                    "summary": "<p>If obj is a DOM node, set dontFix to true to prevent delegation\nof this connection to the DOM event manager.\n</p>\n"
                }
            ],
            "returnTypes": [
                "undefined"
            ],
            "summary": "<p><code>dojo.connect</code> is a deprecated event handling and delegation method in\nDojo. It allows one function to &quot;listen in&quot; on the execution of\nany other, triggering the second whenever the first is called. Many\nlisteners may be attached to a function, and source functions may\nbe either regular function calls or DOM events.\n</p>\n",
            "description": "<p>Connects listeners to actions, so that after event fires, a\nlistener is called with the same arguments passed to the original\nfunction.\n\n</p>\n<p>Since <code>dojo.connect</code> allows the source of events to be either a\n&quot;regular&quot; JavaScript function or a DOM event, it provides a uniform\ninterface for listening to all the types of events that an\napplication is likely to deal with though a single, unified\ninterface. DOM programmers may want to think of it as\n&quot;addEventListener for everything and anything&quot;.\n\n</p>\n<p>When setting up a connection, the <code>event</code> parameter must be a\nstring that is the name of the method/event to be listened for. If\n<code>obj</code> is null, <code>kernel.global</code> is assumed, meaning that connections\nto global methods are supported but also that you may inadvertently\nconnect to a global by passing an incorrect object name or invalid\nreference.\n\n</p>\n<p><code>dojo.connect</code> generally is forgiving. If you pass the name of a\nfunction or method that does not yet exist on <code>obj</code>, connect will\nnot fail, but will instead set up a stub method. Similarly, null\narguments may simply be omitted such that fewer than 4 arguments\nmay be required to set up a connection See the examples for details.\n\n</p>\n<p>The return value is a handle that is needed to\nremove this connection with <code>dojo.disconnect</code>.\n</p>\n",
            "examples": [
                "<p>When obj.onchange(), do ui.update():\n\n</p>\ndojo.connect(obj, &quot;onchange&quot;, ui, &quot;update&quot;);\ndojo.connect(obj, &quot;onchange&quot;, ui, ui.update); // same\n",
                "<p>Using return value for disconnect:\n\n</p>\nvar link = dojo.connect(obj, &quot;onchange&quot;, ui, &quot;update&quot;);\n...\ndojo.disconnect(link);\n",
                "<p>When onglobalevent executes, watcher.handler is invoked:\n\n</p>\ndojo.connect(null, &quot;onglobalevent&quot;, watcher, &quot;handler&quot;);\n",
                "<p>When ob.onCustomEvent executes, customEventHandler is invoked:\n\n</p>\ndojo.connect(ob, &quot;onCustomEvent&quot;, null, &quot;customEventHandler&quot;);\ndojo.connect(ob, &quot;onCustomEvent&quot;, &quot;customEventHandler&quot;); // same\n",
                "<p>When ob.onCustomEvent executes, customEventHandler is invoked\nwith the same scope (this):\n\n</p>\ndojo.connect(ob, &quot;onCustomEvent&quot;, null, customEventHandler);\ndojo.connect(ob, &quot;onCustomEvent&quot;, customEventHandler); // same\n",
                "<p>When globalEvent executes, globalHandler is invoked\nwith the same scope (this):\n\n</p>\ndojo.connect(null, &quot;globalEvent&quot;, null, globalHandler);\ndojo.connect(&quot;globalEvent&quot;, globalHandler); // same\n"
            ]
        },
        {
            "name": "connectPublisher",
            "scope": "normal",
            "types": [
                "function"
            ],
            "from": "dojo/_base/connect",
            "parameters": [
                {
                    "name": "topic",
                    "types": [
                        "String"
                    ],
                    "usage": "required",
                    "summary": "<p>The name of the topic to publish.</p>\n"
                },
                {
                    "name": "obj",
                    "types": [
                        "Object"
                    ],
                    "usage": "optional",
                    "summary": "<p>The source object for the event function. Defaults to kernel.global\nif null.</p>\n"
                },
                {
                    "name": "event",
                    "types": [
                        "String"
                    ],
                    "usage": "required",
                    "summary": "<p>The name of the event function in obj.\nI.e. identifies a property obj[event].</p>\n"
                }
            ],
            "returnTypes": [
                "undefined"
            ],
            "summary": "<p>Ensure that every time obj.event() is called, a message is published\non the topic. Returns a handle which can be passed to\ndojo.disconnect() to disable subsequent automatic publication on\nthe topic.</p>\n",
            "examples": [
                "dojo.connectPublisher(&quot;/ajax/start&quot;, dojo, &quot;xhrGet&quot;);\n"
            ]
        },
        {
            "name": "disconnect",
            "scope": "normal",
            "types": [
                "function"
            ],
            "from": "dojo/_base/connect",
            "parameters": [
                {
                    "name": "handle",
                    "types": [
                        "Handle"
                    ],
                    "usage": "required",
                    "summary": "<p>the return value of the dojo.connect call that created the connection.</p>\n"
                }
            ],
            "returnTypes": [],
            "summary": "<p>Remove a link created by dojo.connect.</p>\n",
            "description": "<p>Removes the connection between event and the method referenced by handle.</p>\n"
        },
        {
            "name": "isCopyKey",
            "scope": "normal",
            "types": [
                "function"
            ],
            "from": "dojo/_base/connect",
            "parameters": [
                {
                    "name": "e",
                    "types": [
                        "Event"
                    ],
                    "usage": "required",
                    "summary": "<p>Event object to examine</p>\n"
                }
            ],
            "returnTypes": [
                "undefined"
            ],
            "summary": "<p>Checks an event for the copy key (meta on Mac, and ctrl anywhere else)</p>\n"
        },
        {
            "name": "publish",
            "scope": "normal",
            "types": [
                "function"
            ],
            "from": "dojo/_base/connect",
            "parameters": [
                {
                    "name": "topic",
                    "types": [
                        "String"
                    ],
                    "usage": "required",
                    "summary": "<p>The name of the topic to publish.</p>\n"
                },
                {
                    "name": "args",
                    "types": [
                        "Array"
                    ],
                    "usage": "optional",
                    "summary": "<p>An array of arguments. The arguments will be applied\nto each topic subscriber (as first class parameters, via apply).</p>\n"
                }
            ],
            "returnTypes": [
                "undefined"
            ],
            "summary": "<p>Invoke all listener method subscribed to topic.</p>\n",
            "examples": [
                "dojo.subscribe(&quot;alerts&quot;, null, function(caption, message){ alert(caption + &quot;\\n&quot; + message); };\ndojo.publish(&quot;alerts&quot;, [ &quot;read this&quot;, &quot;hello world&quot; ]);\n"
            ]
        },
        {
            "name": "subscribe",
            "scope": "normal",
            "types": [
                "function"
            ],
            "from": "dojo/_base/connect",
            "parameters": [
                {
                    "name": "topic",
                    "types": [
                        "String"
                    ],
                    "usage": "required",
                    "summary": "<p>The topic to which to subscribe.</p>\n"
                },
                {
                    "name": "context",
                    "types": [
                        "Object"
                    ],
                    "usage": "optional",
                    "summary": "<p>Scope in which method will be invoked, or null for default scope.</p>\n"
                },
                {
                    "name": "method",
                    "types": [
                        "String",
                        "Function"
                    ],
                    "usage": "required",
                    "summary": "<p>The name of a function in context, or a function reference. This is the function that\nis invoked when topic is published.</p>\n"
                }
            ],
            "returnTypes": [
                "undefined"
            ],
            "summary": "<p>Attach a listener to a named topic. The listener function is invoked whenever the\nnamed topic is published (see: dojo.publish).\nReturns a handle which is needed to unsubscribe this listener.</p>\n",
            "examples": [
                "dojo.subscribe(&quot;alerts&quot;, null, function(caption, message){ alert(caption + &quot;\\n&quot; + message); });\ndojo.publish(&quot;alerts&quot;, [ &quot;read this&quot;, &quot;hello world&quot; ]);\n"
            ]
        },
        {
            "name": "unsubscribe",
            "scope": "normal",
            "types": [
                "function"
            ],
            "from": "dojo/_base/connect",
            "parameters": [
                {
                    "name": "handle",
                    "types": [
                        "Handle"
                    ],
                    "usage": "required",
                    "summary": "<p>The handle returned from a call to subscribe.</p>\n"
                }
            ],
            "returnTypes": [],
            "summary": "<p>Remove a topic listener.</p>\n",
            "examples": [
                "var alerter = dojo.subscribe(&quot;alerts&quot;, null, function(caption, message){ alert(caption + &quot;\\n&quot; + message); };\n...\ndojo.unsubscribe(alerter);\n"
            ]
        }
    ],
    "rootPath": "../../../",
    "shortName": "connect"
}