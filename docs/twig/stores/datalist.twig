<h1>Datalist</h1>

<p>There are many different ways to add a store to the manager, depending on your needs.</p>

<p>Stores can be added using markup. If you place a <code>datalist</code> anywhere in your document with it's <code>id</code> attribute set, then <a href="/api/havok/store/Datalist">havok/store/Datalist</a> will be used to turn that <code>datalist</code> into a store. Eg:</p>

<pre class="prettyprint linenums">
{% set ex1 %}
<datalist id="myDatalistStore">
    <option data-id="home">home</option>
    <option data-id="navs">#navs anchor</option>
    <option data-id="disabled">disabled pill</option>
</datalist>
<script>
require(['havok/store/manager!myDatalistStore'], function(myDatalistStore){
    //do something with myDatalistStore
}
</script>
{% endset %}{{ex1|e}}</pre>




<p>The store manager is a central repository for your app's data stores. Stores can be added to the manager in many different ways, and then used throughout your application.</p>

<h2>Getting a store</h2>

<p>To get a store, pass the store name to the <code>get</code> function. Eg:</p>

<pre class="prettyprint linenums">
require(['havok/store/manager'], function(storeManager){
    storeManager.get('mystore').then(function(mystore){
        //do something with mystore
    })
}</pre>

<h2>AMD Plugin</h2>

<p><code>havok/store/manager</code> is also an AMD plugin, allowing you to retrieve a store with the following shorthand:</p>

<pre class="prettyprint linenums">
require(['havok/store/manager!mystore'], function(mystore){
    //do something with mystore
}</pre>

<h2>Adding Stores</h2>

<p>There are many different ways to add a store to the manager, depending on your needs.</p>

<h3>Directly</h3>

<p>A store can be added by directly adding it to the <code>manager.stores</code> object. Eg:</p>

<pre class="prettyprint linenums">
require(['dojo/store/Memory', 'havok/get!havok/store/manager'], function(Memory, storeManager){
    storeManager.stores.myStore = new Memory({data: [
        {id: 0, name: 'pigglet'}
        ...
    ]);
}</pre>

<h3>Via Config</h3>

<p>Di configuration can be used to add stores. Eg:</p>

<pre class="prettyprint linenums">
di: {
    'havok/store/stores': {
        gets: {
            store1: 'my/store/one',
            store2: 'my/store/two'
        },
        proxies: {
            store3: {
                base: 'my/store/three',
                proxyMethods: [
                    'get',
                    'query'
                ]
            }
        }
    }
}</pre>

<p>Adding stores via di is particularly handy for two reasons.</p>

<p>Firstly, it is very easy to override a store, and inject an alternative data set.</p>

<p>Secondly, by using proxies, the store will be lazy loaded. That is, it will only be fetched on it's first use.</p>

<h3>Declarative Stores</h3>



    <h2>See also</h2>

    <p><a href="/widgets.html#stores">Examples</a> of widgets using the store manager.</p>

    <p>Api documentation:</p>
    <ul>
        <li><a href="/api/havok/store/manager.html">havok/store/manager</a></li>
        <li><a href="/api/havok/store/Datalist.html">havok/store/Datalist</a></li>
        <li><a href="/api/havok/store/JsonRest.html">havok/store/JsonRest</a></li>
    </ul>
