{
    "location": "dojo/_base/kernel.string",
    "type": "object",
    "summary": "<p>String utilities for Dojo</p>\n",
    "methods": [
        {
            "name": "camelCase",
            "scope": "normal",
            "types": [
                "function"
            ],
            "from": "havok/string",
            "extensionModule": true,
            "parameters": [
                {
                    "name": "value",
                    "types": [
                        "undefined"
                    ],
                    "usage": "required"
                }
            ],
            "returnTypes": [
                "undefined"
            ],
            "summary": "<p>Takes a dash separated string and makes it camel case</p>\n"
        },
        {
            "name": "pad",
            "scope": "normal",
            "types": [
                "function"
            ],
            "from": "dojo/string",
            "extensionModule": true,
            "parameters": [
                {
                    "name": "text",
                    "types": [
                        "String"
                    ],
                    "usage": "required",
                    "summary": "<p>the string to pad</p>\n"
                },
                {
                    "name": "size",
                    "types": [
                        "Integer"
                    ],
                    "usage": "required",
                    "summary": "<p>length to provide padding</p>\n"
                },
                {
                    "name": "ch",
                    "types": [
                        "String"
                    ],
                    "usage": "optional",
                    "summary": "<p>character to pad, defaults to &#39;0&#39;</p>\n"
                },
                {
                    "name": "end",
                    "types": [
                        "Boolean"
                    ],
                    "usage": "optional",
                    "summary": "<p>adds padding at the end if true, otherwise pads at start</p>\n"
                }
            ],
            "returnTypes": [
                "number"
            ],
            "summary": "<p>Pad a string to guarantee that it is at least <code>size</code> length by\nfilling with the character <code>ch</code> at either the start or end of the\nstring. Pads at the start, by default.</p>\n",
            "examples": [
                "// Fill the string to length 10 with &quot;+&quot; characters on the right.  Yields &quot;Dojo++++++&quot;.\nstring.pad(&quot;Dojo&quot;, 10, &quot;+&quot;, true);\n"
            ]
        },
        {
            "name": "rep",
            "scope": "normal",
            "types": [
                "function"
            ],
            "from": "dojo/string",
            "extensionModule": true,
            "parameters": [
                {
                    "name": "str",
                    "types": [
                        "String"
                    ],
                    "usage": "required",
                    "summary": "<p>the string to replicate</p>\n"
                },
                {
                    "name": "num",
                    "types": [
                        "Integer"
                    ],
                    "usage": "required",
                    "summary": "<p>number of times to replicate the string</p>\n"
                }
            ],
            "returnTypes": [
                "string",
                "undefined"
            ],
            "summary": "<p>Efficiently replicate a string <code>n</code> times.</p>\n"
        },
        {
            "name": "substitute",
            "scope": "normal",
            "types": [
                "function"
            ],
            "from": "dojo/string",
            "extensionModule": true,
            "parameters": [
                {
                    "name": "template",
                    "types": [
                        "String"
                    ],
                    "usage": "required",
                    "summary": "<p>a string with expressions in the form <code>${key}</code> to be replaced or\n<code>${key:format}</code> which specifies a format function. keys are case-sensitive.</p>\n"
                },
                {
                    "name": "map",
                    "types": [
                        "Object",
                        "Array"
                    ],
                    "usage": "required",
                    "summary": "<p>hash to search for substitutions</p>\n"
                },
                {
                    "name": "transform",
                    "types": [
                        "Function"
                    ],
                    "usage": "optional",
                    "summary": "<p>a function to process all parameters before substitution takes\nplace, e.g. mylib.encodeXML</p>\n"
                },
                {
                    "name": "thisObject",
                    "types": [
                        "Object"
                    ],
                    "usage": "optional",
                    "summary": "<p>where to look for optional format function; default to the global\nnamespace</p>\n"
                }
            ],
            "returnTypes": [
                "undefined"
            ],
            "summary": "<p>Performs parameterized substitutions on a string. Throws an\nexception if any parameter is unmatched.</p>\n",
            "examples": [
                "<p>Substitutes two expressions in a string from an Array or Object\n\n</p>\n// returns &quot;File &#39;foo.html&#39; is not found in directory &#39;/temp&#39;.&quot;\n// by providing substitution data in an Array\nstring.substitute(\n    &quot;File &#39;${0}&#39; is not found in directory &#39;${1}&#39;.&quot;,\n    [&quot;foo.html&quot;,&quot;/temp&quot;]\n);\n\n// also returns &quot;File &#39;foo.html&#39; is not found in directory &#39;/temp&#39;.&quot;\n// but provides substitution data in an Object structure.  Dotted\n// notation may be used to traverse the structure.\nstring.substitute(\n    &quot;File &#39;${name}&#39; is not found in directory &#39;${info.dir}&#39;.&quot;,\n    { name: &quot;foo.html&quot;, info: { dir: &quot;/temp&quot; } }\n);\n",
                "<p>Use a transform function to modify the values:\n\n</p>\n// returns &quot;file &#39;foo.html&#39; is not found in directory &#39;/temp&#39;.&quot;\nstring.substitute(\n    &quot;${0} is not found in ${1}.&quot;,\n    [&quot;foo.html&quot;,&quot;/temp&quot;],\n    function(str){\n        // try to figure out the type\n        var prefix = (str.charAt(0) == &quot;/&quot;) ? &quot;directory&quot;: &quot;file&quot;;\n        return prefix + &quot; &#39;&quot; + str + &quot;&#39;&quot;;\n    }\n);\n",
                "<p>Use a formatter\n\n</p>\n// returns &quot;thinger -- howdy&quot;\nstring.substitute(\n    &quot;${0:postfix}&quot;, [&quot;thinger&quot;], null, {\n        postfix: function(value, key){\n            return value + &quot; -- howdy&quot;;\n        }\n    }\n);\n"
            ]
        },
        {
            "name": "trim",
            "scope": "normal",
            "types": [
                "function"
            ],
            "from": "dojo/string",
            "extensionModule": true,
            "parameters": [
                {
                    "name": "str",
                    "types": [
                        "String"
                    ],
                    "usage": "required",
                    "summary": "<p>String to be trimmed</p>\n"
                }
            ],
            "returnTypes": [
                "String",
                "string"
            ],
            "returnDescription": "<p>Returns the trimmed string</p>\n",
            "summary": "<p>Trims whitespace from both sides of the string</p>\n",
            "description": "<p>This version of trim() was taken from <a href=\"http://blog.stevenlevithan.com/archives/faster-trim-javascript\">Steven Levithan&#39;s blog</a>.\nThe short yet performant version of this function is dojo.trim(),\nwhich is part of Dojo base.  Uses String.prototype.trim instead, if available.</p>\n"
        },
        {
            "name": "ucFirst",
            "scope": "normal",
            "types": [
                "function"
            ],
            "from": "havok/string",
            "extensionModule": true,
            "parameters": [
                {
                    "name": "value",
                    "types": [
                        "undefined"
                    ],
                    "usage": "required"
                }
            ],
            "returnTypes": [
                "number"
            ],
            "summary": "<p>Makes the first letter of a string uppercase</p>\n"
        }
    ],
    "rootPath": "../../../",
    "shortName": "kernel.string"
}