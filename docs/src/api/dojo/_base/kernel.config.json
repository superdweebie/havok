{
    "location": "dojo/_base/kernel.config",
    "type": "object",
    "summary": "<p>This module defines the user configuration during bootstrap.</p>\n",
    "description": "<p>By defining user configuration as a module value, an entire configuration can be specified in a build,\nthereby eliminating the need for sniffing and or explicitly setting in the global variable dojoConfig.\nAlso, when multiple instances of dojo exist in a single application, each will necessarily be located\nat an unique absolute module identifier as given by the package configuration. Implementing configuration\nas a module allows for specifying unique, per-instance configurations.</p>\n",
    "examples": [
        "<p>Create a second instance of dojo with a different, instance-unique configuration (assume the loader and\ndojo.js are already loaded).\n\n</p>\n<pre><code>// specify a configuration that creates a new instance of dojo at the absolute module identifier &quot;myDojo&quot;\nrequire({\n    packages:[{\n        name:&quot;myDojo&quot;,\n        location:&quot;.&quot;, //assume baseUrl points to dojo.js\n    }]\n});\n\n// specify a configuration for the myDojo instance\ndefine(&quot;myDojo/config&quot;, {\n    // normal configuration variables go here, e.g.,\n    locale:&quot;fr-ca&quot;\n});\n\n// load and use the new instance of dojo\nrequire([&quot;myDojo&quot;], function(dojo){\n    // dojo is the new instance of dojo\n    // use as required\n});</code></pre>\n"
    ],
    "properties": [
        {
            "name": "addOnLoad",
            "scope": "normal",
            "types": [
                "Function",
                "Array"
            ],
            "from": "dojo/_base/config",
            "summary": "<p>Adds a callback via dojo/ready. Useful when Dojo is added after\nthe page loads and djConfig.afterOnLoad is true. Supports the same\narguments as dojo/ready. When using a function reference, use\n<code>djConfig.addOnLoad = function(){};</code>. For object with function name use\n<code>djConfig.addOnLoad = [myObject, &quot;functionName&quot;];</code> and for object with\nfunction reference use\n<code>djConfig.addOnLoad = [myObject, function(){}];</code></p>\n"
        },
        {
            "name": "afterOnLoad",
            "scope": "normal",
            "types": [
                "boolean"
            ],
            "from": "dojo/ready",
            "extensionModule": true
        },
        {
            "name": "baseUrl",
            "scope": "normal",
            "types": [
                "undefined"
            ],
            "from": "dojo/_base/kernel"
        },
        {
            "name": "callback",
            "scope": "normal",
            "types": [
                "Function",
                "Array"
            ],
            "from": "dojo/_base/config",
            "summary": "<p>Defines a callback to be used when dependencies are defined before \nthe loader has been loaded. When provided, they cause the loader to \nexecute require(deps, callback) once it has finished loading. \nShould be used with deps.</p>\n"
        },
        {
            "name": "defaultDuration",
            "scope": "normal",
            "types": [
                "Number"
            ],
            "from": "dojo/_base/config",
            "summary": "<p>Default duration, in milliseconds, for wipe and fade animations within dijits.\nAssigned to dijit.defaultDuration.</p>\n"
        },
        {
            "name": "deferredInstrumentation",
            "scope": "normal",
            "types": [
                "Boolean"
            ],
            "from": "dojo/_base/config",
            "summary": "<p>Whether deferred instrumentation should be loaded or included\nin builds.</p>\n"
        },
        {
            "name": "deps",
            "scope": "normal",
            "types": [
                "Function",
                "Array"
            ],
            "from": "dojo/_base/config",
            "summary": "<p>Defines dependencies to be used before the loader has been loaded.\nWhen provided, they cause the loader to execute require(deps, callback) \nonce it has finished loading. Should be used with callback.</p>\n"
        },
        {
            "name": "dojoBlankHtmlUrl",
            "scope": "normal",
            "types": [
                "String"
            ],
            "from": "dojo/_base/config",
            "summary": "<p>Used by some modules to configure an empty iframe. Used by dojo/io/iframe and\ndojo/back, and dijit/popup support in IE where an iframe is needed to make sure native\ncontrols do not bleed through the popups. Normally this configuration variable\ndoes not need to be set, except when using cross-domain/CDN Dojo builds.\nSave dojo/resources/blank.html to your domain and set <code>djConfig.dojoBlankHtmlUrl</code>\nto the path on your domain your copy of blank.html.</p>\n"
        },
        {
            "name": "extraLocale",
            "scope": "normal",
            "types": [
                "Array"
            ],
            "from": "dojo/_base/config",
            "summary": "<p>No default value. Specifies additional locales whose\nresources should also be loaded alongside the default locale when\ncalls to <code>dojo.requireLocalization()</code> are processed.</p>\n"
        },
        {
            "name": "ioPublish",
            "scope": "normal",
            "types": [
                "Boolean?"
            ],
            "from": "dojo/_base/config",
            "summary": "<p>Set this to true to enable publishing of topics for the different phases of\nIO operations. Publishing is done via dojo/topic.publish(). See dojo/main.__IoPublish for a list\nof topics that are published.</p>\n"
        },
        {
            "name": "isDebug",
            "scope": "normal",
            "types": [
                "Boolean"
            ],
            "from": "dojo/_base/config",
            "summary": "<p>Defaults to <code>false</code>. If set to <code>true</code>, ensures that Dojo provides\nextended debugging feedback via Firebug. If Firebug is not available\non your platform, setting <code>isDebug</code> to <code>true</code> will force Dojo to\npull in (and display) the version of Firebug Lite which is\nintegrated into the Dojo distribution, thereby always providing a\ndebugging/logging console when <code>isDebug</code> is enabled. Note that\nFirebug&#39;s <code>console.*</code> methods are ALWAYS defined by Dojo. If\n<code>isDebug</code> is false and you are on a platform without Firebug, these\nmethods will be defined as no-ops.</p>\n"
        },
        {
            "name": "locale",
            "scope": "normal",
            "types": [
                "String"
            ],
            "from": "dojo/_base/config",
            "summary": "<p>The locale to assume for loading localized resources in this page,\nspecified according to <a href=\"http://www.ietf.org/rfc/rfc3066.txt\">RFC 3066</a>.\nMust be specified entirely in lowercase, e.g. <code>en-us</code> and <code>zh-cn</code>.\nSee the documentation for <code>dojo.i18n</code> and <code>dojo.requireLocalization</code>\nfor details on loading localized resources. If no locale is specified,\nDojo assumes the locale of the user agent, according to <code>navigator.userLanguage</code>\nor <code>navigator.language</code> properties.</p>\n"
        },
        {
            "name": "modulePaths",
            "scope": "normal",
            "types": [
                "Object"
            ],
            "from": "dojo/_base/config",
            "tags": [
                "deprecated"
            ],
            "summary": "<p>A map of module names to paths relative to <code>dojo.baseUrl</code>. The\nkey/value pairs correspond directly to the arguments which\n<code>dojo.registerModulePath</code> accepts. Specifying\n<code>djConfig.modulePaths = { &quot;foo&quot;: &quot;../../bar&quot; }</code> is the equivalent\nof calling <code>dojo.registerModulePath(&quot;foo&quot;, &quot;../../bar&quot;);</code>. Multiple\nmodules may be configured via <code>djConfig.modulePaths</code>.</p>\n"
        },
        {
            "name": "parseOnLoad",
            "scope": "normal",
            "types": [
                "Boolean"
            ],
            "from": "dojo/_base/config",
            "summary": "<p>Run the parser after the page is loaded</p>\n"
        },
        {
            "name": "require",
            "scope": "normal",
            "types": [
                "String[]"
            ],
            "from": "dojo/_base/config",
            "summary": "<p>An array of module names to be loaded immediately after dojo.js has been included\nin a page.</p>\n"
        },
        {
            "name": "transparentColor",
            "scope": "normal",
            "types": [
                "Array"
            ],
            "from": "dojo/_base/config",
            "summary": "<p>Array containing the r, g, b components used as transparent color in dojo.Color;\nif undefined, [255,255,255] (white) will be used.</p>\n"
        },
        {
            "name": "useCustomLogger",
            "scope": "normal",
            "types": [
                "Anything?"
            ],
            "from": "dojo/_base/config",
            "summary": "<p>If set to a value that evaluates to true such as a string or array and\nisDebug is true and Firebug is not available or running, then it bypasses\nthe creation of Firebug Lite allowing you to define your own console object.</p>\n"
        },
        {
            "name": "useDeferredInstrumentation",
            "scope": "normal",
            "types": [
                "Boolean",
                "String"
            ],
            "from": "dojo/_base/config",
            "summary": "<p>Whether the deferred instrumentation should be used.\n\n</p>\n<ul>\n<li><code>&quot;report-rejections&quot;</code>: report each rejection as it occurs.</li>\n<li><code>true</code> or <code>1</code> or <code>&quot;report-unhandled-rejections&quot;</code>: wait 1 second\n  in an attempt to detect unhandled rejections.</li>\n</ul>\n"
        }
    ]
}