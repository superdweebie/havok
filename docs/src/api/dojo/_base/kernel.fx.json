{
    "location": "dojo/_base/kernel.fx",
    "type": "object",
    "summary": "<p>Effects library on top of Base animations</p>\n",
    "properties": [
        {
            "name": "easing",
            "scope": "normal",
            "types": [
                "object"
            ],
            "from": "dojo/fx/easing",
            "extensionModule": true,
            "summary": "<p>Collection of easing functions to use beyond the default\n<code>dojo._defaultEasing</code> function.</p>\n",
            "description": "<p>Easing functions are used to manipulate the iteration through\nan <code>dojo.Animation</code>s _Line. _Line being the properties of an Animation,\nand the easing function progresses through that Line determining\nhow quickly (or slowly) it should go. Or more accurately: modify\nthe value of the _Line based on the percentage of animation completed.\n\n</p>\n<p>All functions follow a simple naming convention of &quot;ease type&quot; + &quot;when&quot;.\nIf the name of the function ends in Out, the easing described appears\ntowards the end of the animation. &quot;In&quot; means during the beginning,\nand InOut means both ranges of the Animation will applied, both\nbeginning and end.\n\n</p>\n<p>One does not call the easing function directly, it must be passed to\nthe <code>easing</code> property of an animation.</p>\n",
            "examples": [
                "dojo.require(&quot;dojo.fx.easing&quot;);\nvar anim = dojo.fadeOut({\n    node: &#39;node&#39;,\n    duration: 2000,\n    //  note there is no ()\n    easing: dojo.fx.easing.quadIn\n}).play();\n"
            ]
        }
    ],
    "methods": [
        {
            "name": "chain",
            "scope": "normal",
            "types": [
                "function"
            ],
            "from": "dojo/fx",
            "extensionModule": true,
            "parameters": [
                {
                    "name": "animations",
                    "types": [
                        "dojo/_base/fx.Animation[]"
                    ],
                    "usage": "required"
                }
            ],
            "returnTypes": [],
            "summary": "<p>Chain a list of <code>dojo.Animation</code>s to run in sequence\n</p>\n",
            "description": "<p>Return a <code>dojo.Animation</code> which will play all passed\n<code>dojo.Animation</code> instances in sequence, firing its own\nsynthesized events simulating a single animation. (eg:\nonEnd of this animation means the end of the chain,\nnot the individual animations within)\n</p>\n",
            "examples": [
                "<p>Once <code>node</code> is faded out, fade in <code>otherNode</code>\n\n</p>\nfx.chain([\n    dojo.fadeIn({ node:node }),\n    dojo.fadeOut({ node:otherNode })\n]).play();\n"
            ]
        },
        {
            "name": "combine",
            "scope": "normal",
            "types": [
                "function"
            ],
            "from": "dojo/fx",
            "extensionModule": true,
            "parameters": [
                {
                    "name": "animations",
                    "types": [
                        "dojo/_base/fx.Animation[]"
                    ],
                    "usage": "required"
                }
            ],
            "returnTypes": [
                "instance"
            ],
            "summary": "<p>Combine a list of <code>dojo.Animation</code>s to run in parallel\n</p>\n",
            "description": "<p>Combine an array of <code>dojo.Animation</code>s to run in parallel,\nproviding a new <code>dojo.Animation</code> instance encompasing each\nanimation, firing standard animation events.\n</p>\n",
            "examples": [
                "<p>Fade out <code>node</code> while fading in <code>otherNode</code> simultaneously\n\n</p>\nfx.combine([\n    dojo.fadeIn({ node:node }),\n    dojo.fadeOut({ node:otherNode })\n]).play();\n",
                "<p>When the longest animation ends, execute a function:\n\n</p>\nvar anim = fx.combine([\n    dojo.fadeIn({ node: n, duration:700 }),\n    dojo.fadeOut({ node: otherNode, duration: 300 })\n]);\naspect.after(anim, &quot;onEnd&quot;, function(){\n    // overall animation is done.\n}, true);\nanim.play(); // play the animation\n"
            ]
        },
        {
            "name": "slideTo",
            "scope": "normal",
            "types": [
                "function"
            ],
            "from": "dojo/fx",
            "extensionModule": true,
            "parameters": [
                {
                    "name": "args",
                    "types": [
                        "Object"
                    ],
                    "usage": "required",
                    "summary": "<p>A hash-map of standard <code>dojo.Animation</code> constructor properties\n(such as easing: node: duration: and so on). Special args members\nare <code>top</code> and <code>left</code>, which indicate the new position to slide to.\n</p>\n"
                }
            ],
            "returnTypes": [],
            "summary": "<p>Slide a node to a new top/left position\n</p>\n",
            "description": "<p>Returns an animation that will slide &quot;node&quot;\ndefined in args Object from its current position to\nthe position defined by (args.left, args.top).\n</p>\n",
            "examples": [
                ".slideTo({ node: node, left:&quot;40&quot;, top:&quot;50&quot;, units:&quot;px&quot; }).play()\n"
            ]
        },
        {
            "name": "wipeIn",
            "scope": "normal",
            "types": [
                "function"
            ],
            "from": "dojo/fx",
            "extensionModule": true,
            "parameters": [
                {
                    "name": "args",
                    "types": [
                        "Object"
                    ],
                    "usage": "required",
                    "summary": "<p>A hash-map of standard <code>dojo.Animation</code> constructor properties\n(such as easing: node: duration: and so on)\n</p>\n"
                }
            ],
            "returnTypes": [],
            "summary": "<p>Expand a node to it&#39;s natural height.\n</p>\n",
            "description": "<p>Returns an animation that will expand the\nnode defined in &#39;args&#39; object from it&#39;s current height to\nit&#39;s natural height (with no scrollbar).\nNode must have no margin/border/padding.\n</p>\n",
            "examples": [
                "fx.wipeIn({\n    node:&quot;someId&quot;\n}).play()\n"
            ]
        },
        {
            "name": "wipeOut",
            "scope": "normal",
            "types": [
                "function"
            ],
            "from": "dojo/fx",
            "extensionModule": true,
            "parameters": [
                {
                    "name": "args",
                    "types": [
                        "Object"
                    ],
                    "usage": "required",
                    "summary": "<p>A hash-map of standard <code>dojo.Animation</code> constructor properties\n(such as easing: node: duration: and so on)\n</p>\n"
                }
            ],
            "returnTypes": [],
            "summary": "<p>Shrink a node to nothing and hide it.\n</p>\n",
            "description": "<p>Returns an animation that will shrink node defined in &quot;args&quot;\nfrom it&#39;s current height to 1px, and then hide it.\n</p>\n",
            "examples": [
                "fx.wipeOut({ node:&quot;someId&quot; }).play()\n"
            ]
        }
    ],
    "apiPath": "../../",
    "shortName": "kernel.fx"
}