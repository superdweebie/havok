{
    "location": "dojo/_base/window",
    "type": "object",
    "summary": "<p>API to save/set/restore the global/document scope.</p>\n",
    "properties": [
        {
            "name": "doc",
            "scope": "normal",
            "types": [
                "object"
            ],
            "from": "dojo/_base/window",
            "summary": "<p>Alias for the current document. &#39;doc&#39; can be modified\nfor temporary context shifting. See also withDoc().</p>\n",
            "description": "<p>Use this rather than referring to &#39;window.document&#39; to ensure your code runs\ncorrectly in managed contexts.</p>\n",
            "examples": [
                "n.appendChild(dojo.doc.createElement(&#39;div&#39;));\n"
            ]
        },
        {
            "name": "global",
            "scope": "normal",
            "types": [
                "object"
            ],
            "from": "dojo/_base/window",
            "summary": "<p>Alias for the current window. &#39;global&#39; can be modified\nfor temporary context shifting. See also withGlobal().</p>\n",
            "description": "<p>Use this rather than referring to &#39;window&#39; to ensure your code runs\ncorrectly in managed contexts.</p>\n"
        }
    ],
    "methods": [
        {
            "name": "body",
            "scope": "normal",
            "types": [
                "function"
            ],
            "from": "dojo/_base/window",
            "parameters": [
                {
                    "name": "doc",
                    "types": [
                        "Document"
                    ],
                    "usage": "optional"
                }
            ],
            "returnTypes": [
                "undefined"
            ],
            "summary": "<p>Return the body element of the specified document or of dojo/_base/window::doc.</p>\n",
            "examples": [
                "win.body().appendChild(dojo.doc.createElement(&#39;div&#39;));\n"
            ]
        },
        {
            "name": "setContext",
            "scope": "normal",
            "types": [
                "function"
            ],
            "from": "dojo/_base/window",
            "parameters": [
                {
                    "name": "globalObject",
                    "types": [
                        "Object"
                    ],
                    "usage": "required"
                },
                {
                    "name": "globalDocument",
                    "types": [
                        "DocumentElement"
                    ],
                    "usage": "required"
                }
            ],
            "returnTypes": [],
            "summary": "<p>changes the behavior of many core Dojo functions that deal with\nnamespace and DOM lookup, changing them to work in a new global\ncontext (e.g., an iframe). The varibles dojo.global and dojo.doc\nare modified as a result of calling this function and the result of\n<code>dojo.body()</code> likewise differs.</p>\n"
        },
        {
            "name": "withDoc",
            "scope": "normal",
            "types": [
                "function"
            ],
            "from": "dojo/_base/window",
            "parameters": [
                {
                    "name": "documentObject",
                    "types": [
                        "DocumentElement"
                    ],
                    "usage": "required"
                },
                {
                    "name": "callback",
                    "types": [
                        "Function"
                    ],
                    "usage": "required"
                },
                {
                    "name": "thisObject",
                    "types": [
                        "Object"
                    ],
                    "usage": "optional"
                },
                {
                    "name": "cbArguments",
                    "types": [
                        "Array"
                    ],
                    "usage": "optional"
                }
            ],
            "returnTypes": [
                "undefined"
            ],
            "summary": "<p>Invoke callback with documentObject as dojo/_base/window::doc.</p>\n",
            "description": "<p>Invoke callback with documentObject as dojo/_base/window::doc. If provided,\ncallback will be executed in the context of object thisObject\nWhen callback() returns or throws an error, the dojo/_base/window::doc will\nbe restored to its previous state.</p>\n"
        },
        {
            "name": "withGlobal",
            "scope": "normal",
            "types": [
                "function"
            ],
            "from": "dojo/_base/window",
            "parameters": [
                {
                    "name": "globalObject",
                    "types": [
                        "Object"
                    ],
                    "usage": "required"
                },
                {
                    "name": "callback",
                    "types": [
                        "Function"
                    ],
                    "usage": "required"
                },
                {
                    "name": "thisObject",
                    "types": [
                        "Object"
                    ],
                    "usage": "optional"
                },
                {
                    "name": "cbArguments",
                    "types": [
                        "Array"
                    ],
                    "usage": "optional"
                }
            ],
            "returnTypes": [
                "undefined"
            ],
            "summary": "<p>Invoke callback with globalObject as dojo.global and\nglobalObject.document as dojo.doc.</p>\n",
            "description": "<p>Invoke callback with globalObject as dojo.global and\nglobalObject.document as dojo.doc. If provided, globalObject\nwill be executed in the context of object thisObject\nWhen callback() returns or throws an error, the dojo.global\nand dojo.doc will be restored to its previous state.</p>\n"
        }
    ]
}