{
    "location": "dojo/_base/array",
    "type": "object",
    "summary": "<p>The Javascript v1.6 array extensions.</p>\n",
    "methods": [
        {
            "name": "clearCache",
            "scope": "normal",
            "types": [
                "function"
            ],
            "from": "dojo/_base/array",
            "parameters": [],
            "returnTypes": []
        },
        {
            "name": "every",
            "scope": "normal",
            "types": [
                "function"
            ],
            "from": "dojo/_base/array",
            "parameters": [
                {
                    "name": "arr",
                    "types": [
                        "Array",
                        "String"
                    ],
                    "usage": "required",
                    "summary": "<p>the array to iterate on. If a string, operates on individual characters.</p>\n"
                },
                {
                    "name": "callback",
                    "types": [
                        "Function",
                        "String"
                    ],
                    "usage": "required",
                    "summary": "<p>a function is invoked with three arguments: item, index,\nand array and returns true if the condition is met.</p>\n"
                },
                {
                    "name": "thisObject",
                    "types": [
                        "Object"
                    ],
                    "usage": "optional",
                    "summary": "<p>may be used to scope the call to callback</p>\n"
                }
            ],
            "returnTypes": [
                "Boolean"
            ],
            "summary": "<p>Determines whether or not every item in arr satisfies the\ncondition implemented by callback.</p>\n",
            "description": "<p>This function corresponds to the JavaScript 1.6 Array.every() method, with one difference: when\nrun over sparse arrays, this implementation passes the &quot;holes&quot; in the sparse array to\nthe callback function with a value of undefined. JavaScript 1.6&#39;s every skips the holes in the sparse array.\nFor more details, see:\n<a href=\"https://developer.mozilla.org/en/Core_JavaScript_1.5_Reference/Objects/Array/every\">https://developer.mozilla.org/en/Core_JavaScript_1.5_Reference/Objects/Array/every</a></p>\n",
            "examples": [
                "// returns false\narray.every([1, 2, 3, 4], function(item){ return item&gt;1; });\n",
                "// returns true\narray.every([1, 2, 3, 4], function(item){ return item&gt;0; });\n"
            ]
        },
        {
            "name": "filter",
            "scope": "normal",
            "types": [
                "function"
            ],
            "from": "dojo/_base/array",
            "parameters": [
                {
                    "name": "arr",
                    "types": [
                        "Array"
                    ],
                    "usage": "required",
                    "summary": "<p>the array to iterate over.</p>\n"
                },
                {
                    "name": "callback",
                    "types": [
                        "Function",
                        "String"
                    ],
                    "usage": "required",
                    "summary": "<p>a function that is invoked with three arguments (item,\nindex, array). The return of this function is expected to\nbe a boolean which determines whether the passed-in item\nwill be included in the returned array.</p>\n"
                },
                {
                    "name": "thisObject",
                    "types": [
                        "Object"
                    ],
                    "usage": "optional",
                    "summary": "<p>may be used to scope the call to callback</p>\n"
                }
            ],
            "returnTypes": [
                "Array"
            ],
            "summary": "<p>Returns a new Array with those items from arr that match the\ncondition implemented by callback.</p>\n",
            "description": "<p>This function corresponds to the JavaScript 1.6 Array.filter() method, with one difference: when\nrun over sparse arrays, this implementation passes the &quot;holes&quot; in the sparse array to\nthe callback function with a value of undefined. JavaScript 1.6&#39;s filter skips the holes in the sparse array.\nFor more details, see:\n<a href=\"https://developer.mozilla.org/en/Core_JavaScript_1.5_Reference/Objects/Array/filter\">https://developer.mozilla.org/en/Core_JavaScript_1.5_Reference/Objects/Array/filter</a></p>\n",
            "examples": [
                "// returns [2, 3, 4]\narray.filter([1, 2, 3, 4], function(item){ return item&gt;1; });\n"
            ]
        },
        {
            "name": "forEach",
            "scope": "normal",
            "types": [
                "function"
            ],
            "from": "dojo/_base/array",
            "parameters": [
                {
                    "name": "arr",
                    "types": [
                        "Array",
                        "String"
                    ],
                    "usage": "required"
                },
                {
                    "name": "callback",
                    "types": [
                        "Function",
                        "String"
                    ],
                    "usage": "required"
                },
                {
                    "name": "thisObject",
                    "types": [
                        "Object"
                    ],
                    "usage": "optional"
                }
            ],
            "returnTypes": [],
            "summary": "<p>for every item in arr, callback is invoked. Return values are ignored.\nIf you want to break out of the loop, consider using array.every() or array.some().\nforEach does not allow breaking out of the loop over the items in arr.</p>\n",
            "description": "<p>This function corresponds to the JavaScript 1.6 Array.forEach() method, with one difference: when\nrun over sparse arrays, this implementation passes the &quot;holes&quot; in the sparse array to\nthe callback function with a value of undefined. JavaScript 1.6&#39;s forEach skips the holes in the sparse array.\nFor more details, see:\n<a href=\"https://developer.mozilla.org/en/Core_JavaScript_1.5_Reference/Objects/Array/forEach\">https://developer.mozilla.org/en/Core_JavaScript_1.5_Reference/Objects/Array/forEach</a></p>\n",
            "examples": [
                "// log out all members of the array:\narray.forEach(\n      [ &quot;thinger&quot;, &quot;blah&quot;, &quot;howdy&quot;, 10 ],\n      function(item){\n          console.log(item);\n      }\n);\n",
                "// log out the members and their indexes\narray.forEach(\n      [ &quot;thinger&quot;, &quot;blah&quot;, &quot;howdy&quot;, 10 ],\n      function(item, idx, arr){\n          console.log(item, &quot;at index:&quot;, idx);\n      }\n);\n",
                "// use a scoped object member as the callback\n\nvar obj = {\n      prefix: &quot;logged via obj.callback:&quot;,\n      callback: function(item){\n          console.log(this.prefix, item);\n      }\n};\n\n// specifying the scope function executes the callback in that scope\narray.forEach(\n      [ &quot;thinger&quot;, &quot;blah&quot;, &quot;howdy&quot;, 10 ],\n      obj.callback,\n      obj\n);\n\n// alternately, we can accomplish the same thing with lang.hitch()\narray.forEach(\n      [ &quot;thinger&quot;, &quot;blah&quot;, &quot;howdy&quot;, 10 ],\n      lang.hitch(obj, &quot;callback&quot;)\n);\n"
            ]
        },
        {
            "name": "indexOf",
            "scope": "normal",
            "types": [
                "function"
            ],
            "from": "dojo/_base/array",
            "parameters": [
                {
                    "name": "arr",
                    "types": [
                        "Array"
                    ],
                    "usage": "required"
                },
                {
                    "name": "value",
                    "types": [
                        "Object"
                    ],
                    "usage": "required"
                },
                {
                    "name": "fromIndex",
                    "types": [
                        "Integer"
                    ],
                    "usage": "optional"
                },
                {
                    "name": "findLast",
                    "types": [
                        "Boolean"
                    ],
                    "usage": "optional",
                    "summary": "<p>Makes indexOf() work like lastIndexOf().  Used internally; not meant for external usage.</p>\n"
                }
            ],
            "returnTypes": [
                "Number"
            ],
            "summary": "<p>locates the first index of the provided value in the\npassed array. If the value is not found, -1 is returned.</p>\n",
            "description": "<p>This method corresponds to the JavaScript 1.6 Array.indexOf method, with two differences:\n\n</p>\n<ol>\n<li>when run over sparse arrays, the Dojo function invokes the callback for every index\nwhereas JavaScript 1.6&#39;s indexOf skips the holes in the sparse array.</li>\n<li>uses equality (==) rather than strict equality (===)</li>\n</ol>\n<p>For details on this method, see:\n<a href=\"https://developer.mozilla.org/en/Core_JavaScript_1.5_Reference/Objects/Array/indexOf\">https://developer.mozilla.org/en/Core_JavaScript_1.5_Reference/Objects/Array/indexOf</a></p>\n"
        },
        {
            "name": "lastIndexOf",
            "scope": "normal",
            "types": [
                "function"
            ],
            "from": "dojo/_base/array",
            "parameters": [
                {
                    "name": "arr",
                    "types": [
                        "undefined"
                    ],
                    "usage": "required"
                },
                {
                    "name": "value",
                    "types": [
                        "undefined"
                    ],
                    "usage": "required"
                },
                {
                    "name": "fromIndex",
                    "types": [
                        "Integer"
                    ],
                    "usage": "optional"
                }
            ],
            "returnTypes": [
                "Number"
            ],
            "summary": "<p>locates the last index of the provided value in the passed\narray. If the value is not found, -1 is returned.</p>\n",
            "description": "<p>This method corresponds to the JavaScript 1.6 Array.lastIndexOf method, with two differences:\n\n</p>\n<ol>\n<li>when run over sparse arrays, the Dojo function invokes the callback for every index\nwhereas JavaScript 1.6&#39;s lasIndexOf skips the holes in the sparse array.</li>\n<li>uses equality (==) rather than strict equality (===)</li>\n</ol>\n<p>For details on this method, see:\n<a href=\"https://developer.mozilla.org/en/Core_JavaScript_1.5_Reference/Objects/Array/lastIndexOf\">https://developer.mozilla.org/en/Core_JavaScript_1.5_Reference/Objects/Array/lastIndexOf</a></p>\n"
        },
        {
            "name": "map",
            "scope": "normal",
            "types": [
                "function"
            ],
            "from": "dojo/_base/array",
            "parameters": [
                {
                    "name": "arr",
                    "types": [
                        "Array",
                        "String"
                    ],
                    "usage": "required",
                    "summary": "<p>the array to iterate on. If a string, operates on\nindividual characters.</p>\n"
                },
                {
                    "name": "callback",
                    "types": [
                        "Function",
                        "String"
                    ],
                    "usage": "required",
                    "summary": "<p>a function is invoked with three arguments, (item, index,\narray),  and returns a value</p>\n"
                },
                {
                    "name": "thisObject",
                    "types": [
                        "Object"
                    ],
                    "usage": "optional",
                    "summary": "<p>may be used to scope the call to callback</p>\n"
                },
                {
                    "name": "Ctr",
                    "types": [
                        "undefined"
                    ],
                    "usage": "required"
                }
            ],
            "returnTypes": [
                "Array",
                "instance"
            ],
            "summary": "<p>applies callback to each element of arr and returns\nan Array with the results</p>\n",
            "description": "<p>This function corresponds to the JavaScript 1.6 Array.map() method, with one difference: when\nrun over sparse arrays, this implementation passes the &quot;holes&quot; in the sparse array to\nthe callback function with a value of undefined. JavaScript 1.6&#39;s map skips the holes in the sparse array.\nFor more details, see:\n<a href=\"https://developer.mozilla.org/en/Core_JavaScript_1.5_Reference/Objects/Array/map\">https://developer.mozilla.org/en/Core_JavaScript_1.5_Reference/Objects/Array/map</a></p>\n",
            "examples": [
                "// returns [2, 3, 4, 5]\narray.map([1, 2, 3, 4], function(item){ return item+1 });\n"
            ]
        },
        {
            "name": "some",
            "scope": "normal",
            "types": [
                "function"
            ],
            "from": "dojo/_base/array",
            "parameters": [
                {
                    "name": "arr",
                    "types": [
                        "Array",
                        "String"
                    ],
                    "usage": "required",
                    "summary": "<p>the array to iterate over. If a string, operates on individual characters.</p>\n"
                },
                {
                    "name": "callback",
                    "types": [
                        "Function",
                        "String"
                    ],
                    "usage": "required",
                    "summary": "<p>a function is invoked with three arguments: item, index,\nand array and returns true if the condition is met.</p>\n"
                },
                {
                    "name": "thisObject",
                    "types": [
                        "Object"
                    ],
                    "usage": "optional",
                    "summary": "<p>may be used to scope the call to callback</p>\n"
                }
            ],
            "returnTypes": [
                "Boolean"
            ],
            "summary": "<p>Determines whether or not any item in arr satisfies the\ncondition implemented by callback.</p>\n",
            "description": "<p>This function corresponds to the JavaScript 1.6 Array.some() method, with one difference: when\nrun over sparse arrays, this implementation passes the &quot;holes&quot; in the sparse array to\nthe callback function with a value of undefined. JavaScript 1.6&#39;s some skips the holes in the sparse array.\nFor more details, see:\n<a href=\"https://developer.mozilla.org/en/Core_JavaScript_1.5_Reference/Objects/Array/some\">https://developer.mozilla.org/en/Core_JavaScript_1.5_Reference/Objects/Array/some</a></p>\n",
            "examples": [
                "// is true\narray.some([1, 2, 3, 4], function(item){ return item&gt;1; });\n",
                "// is false\narray.some([1, 2, 3, 4], function(item){ return item&lt;1; });\n"
            ]
        },
        {
            "name": "subtract",
            "scope": "normal",
            "types": [
                "function"
            ],
            "from": "havok/array",
            "extensionModule": true,
            "parameters": [
                {
                    "name": "removeFrom",
                    "types": [
                        "havok/array"
                    ],
                    "usage": "required"
                },
                {
                    "name": "removeValues",
                    "types": [
                        "havok/array"
                    ],
                    "usage": "required"
                }
            ],
            "returnTypes": [
                "undefined"
            ],
            "summary": "<p>Remove the values in removeValues from the array removeFrom</p>\n"
        }
    ],
    "rootPath": "../../../",
    "shortName": "array"
}