{
    "location": "dojo/has",
    "type": "function",
    "parameters": [
        {
            "name": "name",
            "types": [
                "String",
                "Integer"
            ],
            "usage": "required",
            "summary": "<p>The name (if a string) or identifier (if an integer) of the feature to test.\n</p>\n"
        }
    ],
    "returnTypes": [
        "boolean"
    ],
    "summary": "<p>Return the current value of the named feature.\n</p>\n",
    "description": "<p>Returns the value of the feature named by name. The feature must have been\npreviously added to the cache by has.add.</p>\n",
    "properties": [
        {
            "name": "cache",
            "scope": "normal",
            "types": [
                "string"
            ],
            "from": "dojo/has"
        }
    ],
    "methods": [
        {
            "name": "add",
            "scope": "normal",
            "types": [
                "function"
            ],
            "from": "dojo/has",
            "parameters": [
                {
                    "name": "name",
                    "types": [
                        "String",
                        "Integer"
                    ],
                    "usage": "required",
                    "summary": "<p>The name (if a string) or identifier (if an integer) of the feature to test.</p>\n"
                },
                {
                    "name": "test",
                    "types": [
                        "Function"
                    ],
                    "usage": "required",
                    "summary": "<p>A test function to register. If a function, queued for testing until actually\nneeded. The test function should return a boolean indicating\nthe presence of a feature or bug.</p>\n"
                },
                {
                    "name": "now",
                    "types": [
                        "Boolean"
                    ],
                    "usage": "optional",
                    "summary": "<p>Optional. Omit if <code>test</code> is not a function. Provides a way to immediately\nrun the test and cache the result.</p>\n"
                },
                {
                    "name": "force",
                    "types": [
                        "Boolean"
                    ],
                    "usage": "optional",
                    "summary": "<p>Optional. If the test already exists and force is truthy, then the existing\ntest will be replaced; otherwise, add does not replace an existing test (that\nis, by default, the first test advice wins).</p>\n"
                }
            ],
            "returnTypes": [
                "undefined"
            ],
            "summary": "<p>Register a new feature test for some named feature.</p>\n",
            "examples": [
                "<p>A redundant test, testFn with immediate execution:\n\n</p>\nhas.add(&quot;javascript&quot;, function(){ return true; }, true);\n",
                "<p>Again with the redundantness. You can do this in your tests, but we should\nnot be doing this in any internal has.js tests\n\n</p>\nhas.add(&quot;javascript&quot;, true);\n",
                "<p>Three things are passed to the testFunction. <code>global</code>, <code>document</code>, and a generic element\nfrom which to work your test should the need arise.\n\n</p>\nhas.add(&quot;bug-byid&quot;, function(g, d, el){\n    // g    == global, typically window, yadda yadda\n    // d    == document object\n    // el == the generic element. a `has` element.\n    return false; // fake test, byid-when-form-has-name-matching-an-id is slightly longer\n});\n"
            ]
        },
        {
            "name": "clearElement",
            "scope": "normal",
            "types": [
                "function"
            ],
            "from": "dojo/has",
            "parameters": [
                {
                    "name": "element",
                    "types": [
                        "undefined"
                    ],
                    "usage": "required"
                }
            ],
            "returnTypes": [],
            "summary": "<p>Deletes the contents of the element passed to test functions.</p>\n"
        },
        {
            "name": "constructor",
            "scope": "prototype",
            "types": [
                "function"
            ],
            "from": "dojo/has",
            "parameters": [
                {
                    "name": "name",
                    "types": [
                        "String",
                        "Integer"
                    ],
                    "usage": "required",
                    "summary": "<p>The name (if a string) or identifier (if an integer) of the feature to test.\n</p>\n"
                }
            ],
            "returnTypes": [
                "boolean"
            ],
            "summary": "<p>Return the current value of the named feature.\n</p>\n",
            "description": "<p>Returns the value of the feature named by name. The feature must have been\npreviously added to the cache by has.add.</p>\n"
        },
        {
            "name": "load",
            "scope": "normal",
            "types": [
                "function"
            ],
            "from": "dojo/has",
            "parameters": [
                {
                    "name": "id",
                    "types": [
                        "String"
                    ],
                    "usage": "required",
                    "summary": "<p>Gives the resolved module id to load.</p>\n"
                },
                {
                    "name": "parentRequire",
                    "types": [
                        "Function"
                    ],
                    "usage": "required",
                    "summary": "<p>The loader require function with respect to the module that contained the plugin resource in it&#39;s\ndependency list.</p>\n"
                },
                {
                    "name": "loaded",
                    "types": [
                        "Function"
                    ],
                    "usage": "required",
                    "summary": "<p>Callback to loader that consumes result of plugin demand.</p>\n"
                }
            ],
            "returnTypes": [],
            "summary": "<p>Conditional loading of AMD modules based on a has feature test value.</p>\n"
        },
        {
            "name": "normalize",
            "scope": "normal",
            "types": [
                "function"
            ],
            "from": "dojo/has",
            "parameters": [
                {
                    "name": "id",
                    "types": [
                        "undefined"
                    ],
                    "usage": "required"
                },
                {
                    "name": "toAbsMid",
                    "types": [
                        "Function"
                    ],
                    "usage": "required",
                    "summary": "<p>Resolves a relative module id into an absolute module id</p>\n"
                }
            ],
            "returnTypes": [],
            "summary": "<p>Resolves id into a module id based on possibly-nested tenary expression that branches on has feature test value(s).\n</p>\n"
        }
    ]
}