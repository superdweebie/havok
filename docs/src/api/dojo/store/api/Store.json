{
    "location": "dojo/store/api/Store",
    "type": "constructor",
    "classlike": true,
    "summary": "<p>This is an abstract API that data provider implementations conform to.\nThis file defines methods signatures and intentionally leaves all the\nmethods unimplemented.  For more information on the ,\nplease visit: <a href=\"http://dojotoolkit.org/reference-guide/dojo/store.html\">http://dojotoolkit.org/reference-guide/dojo/store.html</a>\nEvery method and property is optional, and is only needed if the functionality\nit provides is required.\nEvery method may return a promise for the specified return value if the\nexecution of the operation is asynchronous (except\nfor query() which already defines an async return value).</p>\n",
    "properties": [
        {
            "name": "idProperty",
            "scope": "prototype",
            "types": [
                "String"
            ],
            "from": "dojo/store/api/Store",
            "summary": "<p>If the store has a single primary key, this indicates the property to use as the\nidentity property. The values of this property should be unique.</p>\n"
        },
        {
            "name": "queryEngine",
            "scope": "prototype",
            "types": [
                "Function"
            ],
            "from": "dojo/store/api/Store",
            "summary": "<p>If the store can be queried locally (on the client side in JS), this defines\nthe query engine to use for querying the data store.\nThis takes a query and query options and returns a function that can execute\nthe provided query on a JavaScript array. The queryEngine may be replace to\nprovide more sophisticated querying capabilities. For example:\n\n</p>\nvar query = store.queryEngine({foo:&quot;bar&quot;}, {count:10});\nquery(someArray) -&gt; filtered array\n<p>The returned query function may have a &quot;matches&quot; property that can be\n\n</p>\n<p>used to determine if an object matches the query. For example:\n\n</p>\nquery.matches({id:&quot;some-object&quot;, foo:&quot;bar&quot;}) -&gt; true\nquery.matches({id:&quot;some-object&quot;, foo:&quot;something else&quot;}) -&gt; false\n"
        }
    ],
    "methods": [
        {
            "name": "add",
            "scope": "prototype",
            "types": [
                "function"
            ],
            "from": "dojo/store/api/Store",
            "parameters": [
                {
                    "name": "object",
                    "types": [
                        "Object"
                    ],
                    "usage": "required",
                    "summary": "<p>The object to store.</p>\n"
                },
                {
                    "name": "directives",
                    "types": [
                        "dojo/store/api/Store.PutDirectives"
                    ],
                    "usage": "optional",
                    "summary": "<p>Additional directives for creating objects.</p>\n"
                }
            ],
            "returnTypes": [
                "Number|String"
            ],
            "summary": "<p>Creates an object, throws an error if the object already exists</p>\n"
        },
        {
            "name": "get",
            "scope": "prototype",
            "types": [
                "function"
            ],
            "from": "dojo/store/api/Store",
            "parameters": [
                {
                    "name": "id",
                    "types": [
                        "Number"
                    ],
                    "usage": "required",
                    "summary": "<p>The identity to use to lookup the object</p>\n"
                }
            ],
            "returnTypes": [
                "Object"
            ],
            "returnDescription": "<p>The object in the store that matches the given id.</p>\n",
            "summary": "<p>Retrieves an object by its identity</p>\n"
        },
        {
            "name": "getChildren",
            "scope": "prototype",
            "types": [
                "function"
            ],
            "from": "dojo/store/api/Store",
            "parameters": [
                {
                    "name": "parent",
                    "types": [
                        "Object"
                    ],
                    "usage": "required",
                    "summary": "<p>The object to find the children of.</p>\n"
                },
                {
                    "name": "options",
                    "types": [
                        "dojo/store/api/Store.QueryOptions"
                    ],
                    "usage": "optional",
                    "summary": "<p>Additional options to apply to the retrieval of the children.</p>\n"
                }
            ],
            "returnTypes": [
                "dojo/store/api/Store.QueryResults"
            ],
            "returnDescription": "<p>A result set of the children of the parent object.</p>\n",
            "summary": "<p>Retrieves the children of an object.</p>\n"
        },
        {
            "name": "getIdentity",
            "scope": "prototype",
            "types": [
                "function"
            ],
            "from": "dojo/store/api/Store",
            "parameters": [
                {
                    "name": "object",
                    "types": [
                        "Object"
                    ],
                    "usage": "required",
                    "summary": "<p>The object to get the identity from</p>\n"
                }
            ],
            "returnTypes": [
                "String|Number"
            ],
            "summary": "<p>Returns an object&#39;s identity</p>\n"
        },
        {
            "name": "getMetadata",
            "scope": "prototype",
            "types": [
                "function"
            ],
            "from": "dojo/store/api/Store",
            "parameters": [
                {
                    "name": "object",
                    "types": [
                        "Object"
                    ],
                    "usage": "required",
                    "summary": "<p>The object to return metadata for.</p>\n"
                }
            ],
            "returnTypes": [
                "Object"
            ],
            "returnDescription": "<p>An object containing metadata.</p>\n",
            "summary": "<p>Returns any metadata about the object. This may include attribution,\ncache directives, history, or version information.</p>\n"
        },
        {
            "name": "put",
            "scope": "prototype",
            "types": [
                "function"
            ],
            "from": "dojo/store/api/Store",
            "parameters": [
                {
                    "name": "object",
                    "types": [
                        "Object"
                    ],
                    "usage": "required",
                    "summary": "<p>The object to store.</p>\n"
                },
                {
                    "name": "directives",
                    "types": [
                        "dojo/store/api/Store.PutDirectives"
                    ],
                    "usage": "optional",
                    "summary": "<p>Additional directives for storing objects.</p>\n"
                }
            ],
            "returnTypes": [
                "Number|String"
            ],
            "summary": "<p>Stores an object</p>\n"
        },
        {
            "name": "PutDirectives",
            "scope": "normal",
            "types": [
                "constructor"
            ],
            "from": "dojo/store/api/Store",
            "parameters": [],
            "returnTypes": []
        },
        {
            "name": "query",
            "scope": "prototype",
            "types": [
                "function"
            ],
            "from": "dojo/store/api/Store",
            "parameters": [
                {
                    "name": "query",
                    "types": [
                        "String",
                        "Object",
                        "Function"
                    ],
                    "usage": "required",
                    "summary": "<p>The query to use for retrieving objects from the store.</p>\n"
                },
                {
                    "name": "options",
                    "types": [
                        "dojo/store/api/Store.QueryOptions"
                    ],
                    "usage": "required",
                    "summary": "<p>The optional arguments to apply to the resultset.</p>\n"
                }
            ],
            "returnTypes": [
                "dojo/store/api/Store.QueryResults"
            ],
            "returnDescription": "<p>The results of the query, extended with iterative methods.\n</p>\n",
            "summary": "<p>Queries the store for objects. This does not alter the store, but returns a\nset of data from the store.</p>\n",
            "examples": [
                "<p>Given the following store:\n\n</p>\n<p>...find all items where &quot;prime&quot; is true:\n\n\n</p>\nstore.query({ prime: true }).forEach(function(object){\n    // handle each object\n});\n"
            ]
        },
        {
            "name": "QueryOptions",
            "scope": "normal",
            "types": [
                "constructor"
            ],
            "from": "dojo/store/api/Store",
            "parameters": [],
            "returnTypes": []
        },
        {
            "name": "QueryResults",
            "scope": "normal",
            "types": [
                "constructor"
            ],
            "from": "dojo/store/api/Store",
            "parameters": [],
            "returnTypes": []
        },
        {
            "name": "remove",
            "scope": "prototype",
            "types": [
                "function"
            ],
            "from": "dojo/store/api/Store",
            "parameters": [
                {
                    "name": "id",
                    "types": [
                        "Number"
                    ],
                    "usage": "required",
                    "summary": "<p>The identity to use to delete the object</p>\n"
                }
            ],
            "returnTypes": [],
            "summary": "<p>Deletes an object by its identity</p>\n"
        },
        {
            "name": "SortInformation",
            "scope": "normal",
            "types": [
                "constructor"
            ],
            "from": "dojo/store/api/Store",
            "parameters": [],
            "returnTypes": []
        },
        {
            "name": "transaction",
            "scope": "prototype",
            "types": [
                "function"
            ],
            "from": "dojo/store/api/Store",
            "parameters": [],
            "returnTypes": [
                "dojo/store/api/Store.Transaction"
            ],
            "returnDescription": "<p>This represents the new current transaction.</p>\n",
            "summary": "<p>Starts a new transaction.\nNote that a store user might not call transaction() prior to using put,\ndelete, etc. in which case these operations effectively could be thought of\nas &quot;auto-commit&quot; style actions.</p>\n"
        },
        {
            "name": "Transaction",
            "scope": "normal",
            "types": [
                "constructor"
            ],
            "from": "dojo/store/api/Store",
            "parameters": [],
            "returnTypes": []
        }
    ]
}