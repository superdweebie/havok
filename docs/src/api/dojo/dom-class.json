{
    "location": "dojo/dom-class",
    "type": "object",
    "summary": "<p>This module defines the core dojo DOM class API.</p>\n",
    "methods": [
        {
            "name": "add",
            "scope": "normal",
            "types": [
                "function"
            ],
            "from": "dojo/dom-class",
            "parameters": [
                {
                    "name": "node",
                    "types": [
                        "String",
                        "DOMNode"
                    ],
                    "usage": "required",
                    "summary": "<p>String ID or DomNode reference to add a class string too\n</p>\n"
                },
                {
                    "name": "classStr",
                    "types": [
                        "String",
                        "Array"
                    ],
                    "usage": "required",
                    "summary": "<p>A String class name to add, or several space-separated class names,\nor an array of class names.\n</p>\n"
                }
            ],
            "returnTypes": [],
            "summary": "<p>Adds the specified classes to the end of the class list on the\npassed node. Will not re-apply duplicate classes.\n</p>\n",
            "examples": [
                "<p>Add a class to some node:\n\n</p>\nrequire([&quot;dojo/dom-class&quot;], function(domClass){\n    domClass.add(&quot;someNode&quot;, &quot;anewClass&quot;);\n});\n",
                "<p>Add two classes at once:\n\n</p>\nrequire([&quot;dojo/dom-class&quot;], function(domClass){\n    domClass.add(&quot;someNode&quot;, &quot;firstClass secondClass&quot;);\n});\n",
                "<p>Add two classes at once (using array):\n\n</p>\nrequire([&quot;dojo/dom-class&quot;], function(domClass){\n    domClass.add(&quot;someNode&quot;, [&quot;firstClass&quot;, &quot;secondClass&quot;]);\n});\n",
                "<p>Available in <code>dojo/NodeList</code> for multiple additions\n\n</p>\nrequire([&quot;dojo/query&quot;], function(query){\n    query(&quot;ul &gt; li&quot;).addClass(&quot;firstLevel&quot;);\n});\n"
            ]
        },
        {
            "name": "contains",
            "scope": "normal",
            "types": [
                "function"
            ],
            "from": "dojo/dom-class",
            "parameters": [
                {
                    "name": "node",
                    "types": [
                        "String",
                        "DOMNode"
                    ],
                    "usage": "required",
                    "summary": "<p>String ID or DomNode reference to check the class for.</p>\n"
                },
                {
                    "name": "classStr",
                    "types": [
                        "String"
                    ],
                    "usage": "required",
                    "summary": "<p>A string class name to look for.</p>\n"
                }
            ],
            "returnTypes": [
                "boolean"
            ],
            "summary": "<p>Returns whether or not the specified classes are a portion of the\nclass list currently applied to the node.</p>\n",
            "examples": [
                "<p>Do something if a node with id=&quot;someNode&quot; has class=&quot;aSillyClassName&quot; present\n\n</p>\nif(dojo.hasClass(&quot;someNode&quot;,&quot;aSillyClassName&quot;)){ ... }\n"
            ]
        },
        {
            "name": "remove",
            "scope": "normal",
            "types": [
                "function"
            ],
            "from": "dojo/dom-class",
            "parameters": [
                {
                    "name": "node",
                    "types": [
                        "String",
                        "DOMNode"
                    ],
                    "usage": "required",
                    "summary": "<p>String ID or DomNode reference to remove the class from.\n</p>\n"
                },
                {
                    "name": "classStr",
                    "types": [
                        "String",
                        "Array"
                    ],
                    "usage": "optional",
                    "summary": "<p>An optional String class name to remove, or several space-separated\nclass names, or an array of class names. If omitted, all class names\nwill be deleted.\n</p>\n"
                }
            ],
            "returnTypes": [],
            "summary": "<p>Removes the specified classes from node. No <code>contains()</code>\ncheck is required.\n</p>\n",
            "examples": [
                "<p>Remove a class from some node:\n\n</p>\nrequire([&quot;dojo/dom-class&quot;], function(domClass){\n    domClass.remove(&quot;someNode&quot;, &quot;firstClass&quot;);\n});\n",
                "<p>Remove two classes from some node:\n\n</p>\nrequire([&quot;dojo/dom-class&quot;], function(domClass){\n    domClass.remove(&quot;someNode&quot;, &quot;firstClass secondClass&quot;);\n});\n",
                "<p>Remove two classes from some node (using array):\n\n</p>\nrequire([&quot;dojo/dom-class&quot;], function(domClass){\n    domClass.remove(&quot;someNode&quot;, [&quot;firstClass&quot;, &quot;secondClass&quot;]);\n});\n",
                "<p>Remove all classes from some node:\n\n</p>\nrequire([&quot;dojo/dom-class&quot;], function(domClass){\n    domClass.remove(&quot;someNode&quot;);\n});\n",
                "<p>Available in <code>dojo/NodeList</code> for multiple removal\n\n</p>\nrequire([&quot;dojo/query&quot;], function(query){\n    query(&quot;ul &gt; li&quot;).removeClass(&quot;foo&quot;);\n});\n"
            ]
        },
        {
            "name": "replace",
            "scope": "normal",
            "types": [
                "function"
            ],
            "from": "dojo/dom-class",
            "parameters": [
                {
                    "name": "node",
                    "types": [
                        "String",
                        "DOMNode"
                    ],
                    "usage": "required",
                    "summary": "<p>String ID or DomNode reference to remove the class from.\n</p>\n"
                },
                {
                    "name": "addClassStr",
                    "types": [
                        "String",
                        "Array"
                    ],
                    "usage": "required",
                    "summary": "<p>A String class name to add, or several space-separated class names,\nor an array of class names.\n</p>\n"
                },
                {
                    "name": "removeClassStr",
                    "types": [
                        "String",
                        "Array"
                    ],
                    "usage": "optional",
                    "summary": "<p>A String class name to remove, or several space-separated class names,\nor an array of class names.\n</p>\n"
                }
            ],
            "returnTypes": [],
            "summary": "<p>Replaces one or more classes on a node if not present.\nOperates more quickly than calling dojo.removeClass and dojo.addClass\n</p>\n",
            "examples": [
                "require([&quot;dojo/dom-class&quot;], function(domClass){\n    domClass.replace(&quot;someNode&quot;, &quot;add1 add2&quot;, &quot;remove1 remove2&quot;);\n});\n",
                "<p>Replace all classes with addMe\n\n</p>\nrequire([&quot;dojo/dom-class&quot;], function(domClass){\n    domClass.replace(&quot;someNode&quot;, &quot;addMe&quot;);\n});\n",
                "<p>Available in <code>dojo/NodeList</code> for multiple toggles\n\n</p>\nrequire([&quot;dojo/query&quot;], function(query){\n    query(&quot;.findMe&quot;).replaceClass(&quot;addMe&quot;, &quot;removeMe&quot;);\n});\n"
            ]
        },
        {
            "name": "toggle",
            "scope": "normal",
            "types": [
                "function"
            ],
            "from": "dojo/dom-class",
            "parameters": [
                {
                    "name": "node",
                    "types": [
                        "String",
                        "DOMNode"
                    ],
                    "usage": "required",
                    "summary": "<p>String ID or DomNode reference to toggle a class string\n</p>\n"
                },
                {
                    "name": "classStr",
                    "types": [
                        "String",
                        "Array"
                    ],
                    "usage": "required",
                    "summary": "<p>A String class name to toggle, or several space-separated class names,\nor an array of class names.\n</p>\n"
                },
                {
                    "name": "condition",
                    "types": [
                        "Boolean"
                    ],
                    "usage": "optional",
                    "summary": "<p>If passed, true means to add the class, false means to remove.\nOtherwise dojo.hasClass(node, classStr) is used to detect the class presence.\n</p>\n"
                }
            ],
            "returnTypes": [
                "Boolean"
            ],
            "returnDescription": "<p>If passed, true means to add the class, false means to remove.\nOtherwise dojo.hasClass(node, classStr) is used to detect the class presence.\n</p>\n",
            "summary": "<p>Adds a class to node if not present, or removes if present.\nPass a boolean condition if you want to explicitly add or remove.\nReturns the condition that was specified directly or indirectly.\n</p>\n",
            "examples": [
                "require([&quot;dojo/dom-class&quot;], function(domClass){\n    domClass.toggle(&quot;someNode&quot;, &quot;hovered&quot;);\n});\n",
                "<p>Forcefully add a class\n\n</p>\nrequire([&quot;dojo/dom-class&quot;], function(domClass){\n    domClass.toggle(&quot;someNode&quot;, &quot;hovered&quot;, true);\n});\n",
                "<p>Available in <code>dojo/NodeList</code> for multiple toggles\n\n</p>\nrequire([&quot;dojo/query&quot;], function(query){\n    query(&quot;.toggleMe&quot;).toggleClass(&quot;toggleMe&quot;);\n});\n"
            ]
        }
    ],
    "rootPath": "../../",
    "shortName": "dom-class"
}