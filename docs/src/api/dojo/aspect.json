{
    "location": "dojo/aspect",
    "type": "object",
    "summary": "<p>provides aspect oriented programming functionality, allowing for\none to add before, around, or after advice on existing methods.</p>\n",
    "examples": [
        "<pre><code>define([&quot;dojo/aspect&quot;], function(aspect){\n    var signal = aspect.after(targetObject, &quot;methodName&quot;, function(someArgument){\n        this will be called when targetObject.methodName() is called, after the original function is called\n    });</code></pre>\n",
        "<p>The returned signal object can be used to cancel the advice.\n\n</p>\n<pre><code>signal.remove(); // this will stop the advice from being executed anymore\naspect.before(targetObject, &quot;methodName&quot;, function(someArgument){\n    // this will be called when targetObject.methodName() is called, before the original function is called\n });</code></pre>\n"
    ],
    "methods": [
        {
            "name": "after",
            "scope": "normal",
            "types": [
                "function"
            ],
            "from": "dojo/aspect",
            "parameters": [
                {
                    "name": "target",
                    "types": [
                        "Object"
                    ],
                    "usage": "required",
                    "summary": "<p>This is the target object</p>\n"
                },
                {
                    "name": "methodName",
                    "types": [
                        "String"
                    ],
                    "usage": "required",
                    "summary": "<p>This is the name of the method to attach to.</p>\n"
                },
                {
                    "name": "advice",
                    "types": [
                        "Function"
                    ],
                    "usage": "required",
                    "summary": "<p>This is function to be called after the original method</p>\n"
                },
                {
                    "name": "receiveArguments",
                    "types": [
                        "Boolean"
                    ],
                    "usage": "optional",
                    "summary": "<p>If this is set to true, the advice function receives the original arguments (from when the original mehtod\nwas called) rather than the return value of the original/previous method.</p>\n"
                }
            ],
            "returnTypes": [
                "any"
            ],
            "returnDescription": "<p>A signal object that can be used to cancel the advice. If remove() is called on this signal object, it will\nstop the advice function from being executed.</p>\n",
            "summary": "<p>The &quot;after&quot; export of the aspect module is a function that can be used to attach\n&quot;after&quot; advice to a method. This function will be executed after the original method\nis executed. By default the function will be called with a single argument, the return\nvalue of the original method, or the the return value of the last executed advice (if a previous one exists).\nThe fourth (optional) argument can be set to true to so the function receives the original\narguments (from when the original method was called) rather than the return value.\nIf there are multiple &quot;after&quot; advisors, they are executed in the order they were registered.</p>\n"
        },
        {
            "name": "around",
            "scope": "normal",
            "types": [
                "function"
            ],
            "from": "dojo/aspect",
            "parameters": [
                {
                    "name": "target",
                    "types": [
                        "Object"
                    ],
                    "usage": "required",
                    "summary": "<p>This is the target object</p>\n"
                },
                {
                    "name": "methodName",
                    "types": [
                        "String"
                    ],
                    "usage": "required",
                    "summary": "<p>This is the name of the method to attach to.</p>\n"
                },
                {
                    "name": "advice",
                    "types": [
                        "Function"
                    ],
                    "usage": "required",
                    "summary": "<p>This is function to be called around the original method</p>\n"
                }
            ],
            "returnTypes": [],
            "summary": "<p>The &quot;around&quot; export of the aspect module is a function that can be used to attach\n&quot;around&quot; advice to a method. The advisor function is immediately executed when\nthe around() is called, is passed a single argument that is a function that can be\ncalled to continue execution of the original method (or the next around advisor).\nThe advisor function should return a function, and this function will be called whenever\nthe method is called. It will be called with the arguments used to call the method.\nWhatever this function returns will be returned as the result of the method call (unless after advise changes it).</p>\n",
            "examples": [
                "<p>If there are multiple &quot;around&quot; advisors, the most recent one is executed first,\nwhich can then delegate to the next one and so on. For example:\n\n</p>\n<pre><code>around(obj, &quot;foo&quot;, function(originalFoo){\n    return function(){\n        var start = new Date().getTime();\n        var results = originalFoo.apply(this, arguments); // call the original\n        var end = new Date().getTime();\n        console.log(&quot;foo execution took &quot; + (end - start) + &quot; ms&quot;);\n        return results;\n    };\n});</code></pre>\n"
            ]
        },
        {
            "name": "before",
            "scope": "normal",
            "types": [
                "function"
            ],
            "from": "dojo/aspect",
            "parameters": [
                {
                    "name": "target",
                    "types": [
                        "Object"
                    ],
                    "usage": "required",
                    "summary": "<p>This is the target object</p>\n"
                },
                {
                    "name": "methodName",
                    "types": [
                        "String"
                    ],
                    "usage": "required",
                    "summary": "<p>This is the name of the method to attach to.</p>\n"
                },
                {
                    "name": "advice",
                    "types": [
                        "Function"
                    ],
                    "usage": "required",
                    "summary": "<p>This is function to be called before the original method</p>\n"
                }
            ],
            "returnTypes": [],
            "summary": "<p>The &quot;before&quot; export of the aspect module is a function that can be used to attach\n&quot;before&quot; advice to a method. This function will be executed before the original method\nis executed. This function will be called with the arguments used to call the method.\nThis function may optionally return an array as the new arguments to use to call\nthe original method (or the previous, next-to-execute before advice, if one exists).\nIf the before method doesn&#39;t return anything (returns undefined) the original arguments\nwill be preserved.\nIf there are multiple &quot;before&quot; advisors, they are executed in the reverse order they were registered.</p>\n"
        }
    ]
}