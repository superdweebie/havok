{
    "location": "dojo/dom-construct",
    "type": "object",
    "methods": [
        {
            "name": "create",
            "scope": "normal",
            "types": [
                "function"
            ],
            "from": "dojo/dom-construct",
            "parameters": [
                {
                    "name": "tag",
                    "types": [
                        "DOMNode",
                        "String"
                    ],
                    "usage": "required",
                    "summary": "<p>A string of the element to create (eg: &quot;div&quot;, &quot;a&quot;, &quot;p&quot;, &quot;li&quot;, &quot;script&quot;, &quot;br&quot;),\nor an existing DOM node to process.</p>\n"
                },
                {
                    "name": "attrs",
                    "types": [
                        "Object"
                    ],
                    "usage": "required",
                    "summary": "<p>An object-hash of attributes to set on the newly created node.\nCan be null, if you don&#39;t want to set any attributes/styles.\nSee: <code>dojo.setAttr</code> for a description of available attributes.</p>\n"
                },
                {
                    "name": "refNode",
                    "types": [
                        "DOMNode",
                        "String"
                    ],
                    "usage": "optional",
                    "summary": "<p>Optional reference node. Used by <code>dojo.place</code> to place the newly created\nnode somewhere in the dom relative to refNode. Can be a DomNode reference\nor String ID of a node.</p>\n"
                },
                {
                    "name": "pos",
                    "types": [
                        "String"
                    ],
                    "usage": "optional",
                    "summary": "<p>Optional positional reference. Defaults to &quot;last&quot; by way of <code>dojo.place</code>,\nthough can be set to &quot;first&quot;,&quot;after&quot;,&quot;before&quot;,&quot;last&quot;, &quot;replace&quot; or &quot;only&quot;\nto further control the placement of the new node relative to the refNode.\n&#39;refNode&#39; is required if a &#39;pos&#39; is specified.</p>\n"
                }
            ],
            "returnTypes": [
                "undefined"
            ],
            "summary": "<p>Create an element, allowing for optional attribute decoration\nand placement.</p>\n",
            "description": "<p>A DOM Element creation function. A shorthand method for creating a node or\na fragment, and allowing for a convenient optional attribute setting step,\nas well as an optional DOM placement reference.\n\n</p>\n<p>Attributes are set by passing the optional object through <code>dojo.setAttr</code>.\nSee <code>dojo.setAttr</code> for noted caveats and nuances, and API if applicable.\n\n</p>\n<p>Placement is done via <code>dojo.place</code>, assuming the new node to be the action\nnode, passing along the optional reference node and position.</p>\n",
            "examples": [
                "<p>Create a DIV:\n\n</p>\nvar n = dojo.create(&quot;div&quot;);\n",
                "<p>Create a DIV with content:\n\n</p>\nvar n = dojo.create(&quot;div&quot;, { innerHTML:&quot;&lt;p&gt;hi&lt;/p&gt;&quot; });\n",
                "<p>Place a new DIV in the BODY, with no attributes set\n\n</p>\nvar n = dojo.create(&quot;div&quot;, null, dojo.body());\n",
                "<p>Create an UL, and populate it with LI&#39;s. Place the list as the first-child of a\nnode with id=&quot;someId&quot;:\n\n</p>\nvar ul = dojo.create(&quot;ul&quot;, null, &quot;someId&quot;, &quot;first&quot;);\nvar items = [&quot;one&quot;, &quot;two&quot;, &quot;three&quot;, &quot;four&quot;];\ndojo.forEach(items, function(data){\n    dojo.create(&quot;li&quot;, { innerHTML: data }, ul);\n});\n",
                "<p>Create an anchor, with an href. Place in BODY:\n\n</p>\ndojo.create(&quot;a&quot;, { href:&quot;foo.html&quot;, title:&quot;Goto FOO!&quot; }, dojo.body());\n",
                "<p>Create a <code>dojo/NodeList()</code> from a new element (for syntactic sugar):\n\n</p>\ndojo.query(dojo.create(&#39;div&#39;))\n    .addClass(&quot;newDiv&quot;)\n    .onclick(function(e){ console.log(&#39;clicked&#39;, e.target) })\n    .place(&quot;#someNode&quot;); // redundant, but cleaner.\n"
            ]
        },
        {
            "name": "destroy",
            "scope": "normal",
            "types": [
                "function"
            ],
            "from": "dojo/dom-construct",
            "parameters": [
                {
                    "name": "node",
                    "types": [
                        "DOMNode",
                        "String"
                    ],
                    "usage": "required",
                    "summary": "<p>A String ID or DomNode reference of the element to be destroyed\n</p>\n"
                }
            ],
            "returnTypes": [],
            "summary": "<p>Removes a node from its parent, clobbering it and all of its\nchildren.\n</p>\n",
            "description": "<p>Removes a node from its parent, clobbering it and all of its\nchildren. Function only works with DomNodes, and returns nothing.\n</p>\n",
            "examples": [
                "<p>Destroy a node byId:\n\n</p>\ndojo.destroy(&quot;someId&quot;);\n",
                "<p>Destroy all nodes in a list by reference:\n\n</p>\ndojo.query(&quot;.someNode&quot;).forEach(dojo.destroy);\n"
            ]
        },
        {
            "name": "empty",
            "scope": "normal",
            "types": [
                "function"
            ],
            "from": "dojo/dom-construct",
            "parameters": [
                {
                    "name": "node",
                    "types": [
                        "DOMNode",
                        "String"
                    ],
                    "usage": "required",
                    "summary": "<p>a reference to a DOM node or an id.</p>\n"
                }
            ],
            "returnTypes": [],
            "summary": "<p>safely removes all children of the node.</p>\n",
            "examples": [
                "<p>Destroy node&#39;s children byId:\n\n</p>\ndojo.empty(&quot;someId&quot;);\n",
                "<p>Destroy all nodes&#39; children in a list by reference:\n\n</p>\ndojo.query(&quot;.someNode&quot;).forEach(dojo.empty);\n"
            ]
        },
        {
            "name": "place",
            "scope": "normal",
            "types": [
                "function"
            ],
            "from": "dojo/dom-construct",
            "parameters": [
                {
                    "name": "node",
                    "types": [
                        "DOMNode",
                        "String"
                    ],
                    "usage": "required",
                    "summary": "<p>id or node reference, or HTML fragment starting with &quot;&lt;&quot; to place relative to refNode</p>\n"
                },
                {
                    "name": "refNode",
                    "types": [
                        "DOMNode",
                        "String"
                    ],
                    "usage": "required",
                    "summary": "<p>id or node reference to use as basis for placement</p>\n"
                },
                {
                    "name": "position",
                    "types": [
                        "String",
                        "Number"
                    ],
                    "usage": "optional",
                    "summary": "<p>string noting the position of node relative to refNode or a\nnumber indicating the location in the childNodes collection of refNode.\nAccepted string values are:\n\n</p>\n<ul>\n<li>before</li>\n<li>after</li>\n<li>replace</li>\n<li>only</li>\n<li>first</li>\n<li>last</li>\n</ul>\n<p>&quot;first&quot; and &quot;last&quot; indicate positions as children of refNode, &quot;replace&quot; replaces refNode,\n&quot;only&quot; replaces all children.  position defaults to &quot;last&quot; if not specified</p>\n"
                }
            ],
            "returnTypes": [
                "DOMNode",
                "undefined"
            ],
            "returnDescription": "<p>Returned values is the first argument resolved to a DOM node.\n\n</p>\n<p>.place() is also a method of <code>dojo/NodeList</code>, allowing <code>dojo.query</code> node lookups.</p>\n",
            "summary": "<p>Attempt to insert node into the DOM, choosing from various positioning options.\nReturns the first argument resolved to a DOM node.</p>\n",
            "examples": [
                "<p>Place a node by string id as the last child of another node by string id:\n\n</p>\ndojo.place(&quot;someNode&quot;, &quot;anotherNode&quot;);\n",
                "<p>Place a node by string id before another node by string id\n\n</p>\ndojo.place(&quot;someNode&quot;, &quot;anotherNode&quot;, &quot;before&quot;);\n",
                "<p>Create a Node, and place it in the body element (last child):\n\n</p>\ndojo.place(&quot;&lt;div&gt;&lt;/div&gt;&quot;, dojo.body());\n",
                "<p>Put a new LI as the first child of a list by id:\n\n</p>\ndojo.place(&quot;&lt;li&gt;&lt;/li&gt;&quot;, &quot;someUl&quot;, &quot;first&quot;);\n"
            ]
        },
        {
            "name": "toDom",
            "scope": "normal",
            "types": [
                "function"
            ],
            "from": "dojo/dom-construct",
            "parameters": [
                {
                    "name": "frag",
                    "types": [
                        "String"
                    ],
                    "usage": "required",
                    "summary": "<p>the HTML fragment</p>\n"
                },
                {
                    "name": "doc",
                    "types": [
                        "DocumentNode"
                    ],
                    "usage": "optional",
                    "summary": "<p>optional document to use when creating DOM nodes, defaults to\ndojo.doc if not specified.</p>\n"
                }
            ],
            "returnTypes": [
                "any",
                "undefined"
            ],
            "returnDescription": "<p>Document fragment, unless it&#39;s a single node in which case it returns the node itself</p>\n",
            "summary": "<p>instantiates an HTML fragment returning the corresponding DOM.</p>\n",
            "examples": [
                "<p>Create a table row:\n\n</p>\nvar tr = dojo.toDom(&quot;&lt;tr&gt;&lt;td&gt;First!&lt;/td&gt;&lt;/tr&gt;&quot;);\n"
            ]
        }
    ],
    "apiPath": "../",
    "shortName": "dom-construct"
}