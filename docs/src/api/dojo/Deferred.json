{
    "location": "dojo/Deferred",
    "type": "function",
    "parameters": [
        {
            "name": "canceler",
            "types": [
                "Function"
            ],
            "usage": "optional",
            "summary": "<p>Will be invoked if the deferred is canceled. The canceler\nreceives the reason the deferred was canceled as its argument.\nThe deferred is rejected with its return value, or a new\n<code>dojo/errors/CancelError</code> instance.</p>\n"
        }
    ],
    "returnTypes": [],
    "summary": "<p>Creates a new deferred. This API is preferred over\n<code>dojo/_base/Deferred</code>.</p>\n",
    "description": "<p>Creates a new deferred, as an abstraction over (primarily)\nasynchronous operations. The deferred is the private interface\nthat should not be returned to calling code. That&#39;s what the\n<code>promise</code> is for. See <code>dojo/promise/Promise</code>.</p>\n",
    "properties": [
        {
            "name": "promise",
            "scope": "normal",
            "types": [
                "instance"
            ],
            "from": "dojo/Deferred"
        }
    ],
    "methods": [
        {
            "name": "cancel",
            "scope": "normal",
            "types": [
                "function"
            ],
            "from": "dojo/Deferred",
            "parameters": [
                {
                    "name": "reason",
                    "types": [
                        "any"
                    ],
                    "usage": "required",
                    "summary": "<p>A message that may be sent to the deferred&#39;s canceler,\nexplaining why it&#39;s being canceled.</p>\n"
                },
                {
                    "name": "strict",
                    "types": [
                        "Boolean"
                    ],
                    "usage": "optional",
                    "summary": "<p>If strict, will throw an error if the deferred has already\nbeen fulfilled and consequently cannot be canceled.</p>\n"
                }
            ],
            "returnTypes": [
                "any"
            ],
            "returnDescription": "<p>Returns the rejection reason if the deferred was canceled\nnormally.</p>\n",
            "summary": "<p>Inform the deferred it may cancel its asynchronous operation.</p>\n",
            "description": "<p>Inform the deferred it may cancel its asynchronous operation.\nThe deferred&#39;s (optional) canceler is invoked and the\ndeferred will be left in a rejected state. Can affect other\npromises that originate with the same deferred.</p>\n"
        },
        {
            "name": "constructor",
            "scope": "prototype",
            "types": [
                "function"
            ],
            "from": "dojo/Deferred",
            "parameters": [
                {
                    "name": "canceler",
                    "types": [
                        "Function"
                    ],
                    "usage": "optional",
                    "summary": "<p>Will be invoked if the deferred is canceled. The canceler\nreceives the reason the deferred was canceled as its argument.\nThe deferred is rejected with its return value, or a new\n<code>dojo/errors/CancelError</code> instance.</p>\n"
                }
            ],
            "returnTypes": [],
            "summary": "<p>Creates a new deferred. This API is preferred over\n<code>dojo/_base/Deferred</code>.</p>\n",
            "description": "<p>Creates a new deferred, as an abstraction over (primarily)\nasynchronous operations. The deferred is the private interface\nthat should not be returned to calling code. That&#39;s what the\n<code>promise</code> is for. See <code>dojo/promise/Promise</code>.</p>\n"
        },
        {
            "name": "isCanceled",
            "scope": "normal",
            "types": [
                "function"
            ],
            "from": "dojo/Deferred",
            "parameters": [],
            "returnTypes": [
                "Boolean"
            ],
            "summary": "<p>Checks whether the deferred has been canceled.</p>\n"
        },
        {
            "name": "isFulfilled",
            "scope": "normal",
            "types": [
                "function"
            ],
            "from": "dojo/Deferred",
            "parameters": [],
            "returnTypes": [
                "Boolean"
            ],
            "summary": "<p>Checks whether the deferred has been resolved or rejected.</p>\n"
        },
        {
            "name": "isRejected",
            "scope": "normal",
            "types": [
                "function"
            ],
            "from": "dojo/Deferred",
            "parameters": [],
            "returnTypes": [
                "Boolean"
            ],
            "summary": "<p>Checks whether the deferred has been rejected.</p>\n"
        },
        {
            "name": "isResolved",
            "scope": "normal",
            "types": [
                "function"
            ],
            "from": "dojo/Deferred",
            "parameters": [],
            "returnTypes": [
                "Boolean"
            ],
            "summary": "<p>Checks whether the deferred has been resolved.</p>\n"
        },
        {
            "name": "progress",
            "scope": "normal",
            "types": [
                "function"
            ],
            "from": "dojo/Deferred",
            "parameters": [
                {
                    "name": "update",
                    "types": [
                        "any"
                    ],
                    "usage": "required",
                    "summary": "<p>The progress update. Passed to progbacks.</p>\n"
                },
                {
                    "name": "strict",
                    "types": [
                        "Boolean"
                    ],
                    "usage": "optional",
                    "summary": "<p>If strict, will throw an error if the deferred has already\nbeen fulfilled and consequently no progress can be emitted.</p>\n"
                }
            ],
            "returnTypes": [
                "dojo/promise/Promise"
            ],
            "returnDescription": "<p>Returns the original promise for the deferred.</p>\n",
            "summary": "<p>Emit a progress update on the deferred.</p>\n",
            "description": "<p>Emit a progress update on the deferred. Progress updates\ncan be used to communicate updates about the asynchronous\noperation before it has finished.</p>\n"
        },
        {
            "name": "reject",
            "scope": "normal",
            "types": [
                "function"
            ],
            "from": "dojo/Deferred",
            "parameters": [
                {
                    "name": "error",
                    "types": [
                        "any"
                    ],
                    "usage": "required",
                    "summary": "<p>The error result of the deferred. Passed to errbacks.</p>\n"
                },
                {
                    "name": "strict",
                    "types": [
                        "Boolean"
                    ],
                    "usage": "optional",
                    "summary": "<p>If strict, will throw an error if the deferred has already\nbeen fulfilled and consequently cannot be rejected.</p>\n"
                }
            ],
            "returnTypes": [
                "dojo/promise/Promise",
                "instance"
            ],
            "returnDescription": "<p>Returns the original promise for the deferred.</p>\n",
            "summary": "<p>Reject the deferred.</p>\n",
            "description": "<p>Reject the deferred, putting it in an error state.</p>\n"
        },
        {
            "name": "resolve",
            "scope": "normal",
            "types": [
                "function"
            ],
            "from": "dojo/Deferred",
            "parameters": [
                {
                    "name": "value",
                    "types": [
                        "any"
                    ],
                    "usage": "required",
                    "summary": "<p>The result of the deferred. Passed to callbacks.</p>\n"
                },
                {
                    "name": "strict",
                    "types": [
                        "Boolean"
                    ],
                    "usage": "optional",
                    "summary": "<p>If strict, will throw an error if the deferred has already\nbeen fulfilled and consequently cannot be resolved.</p>\n"
                }
            ],
            "returnTypes": [
                "dojo/promise/Promise"
            ],
            "returnDescription": "<p>Returns the original promise for the deferred.</p>\n",
            "summary": "<p>Resolve the deferred.</p>\n",
            "description": "<p>Resolve the deferred, putting it in a success state.</p>\n"
        },
        {
            "name": "then",
            "scope": "normal",
            "types": [
                "function"
            ],
            "from": "dojo/Deferred",
            "parameters": [
                {
                    "name": "callback",
                    "types": [
                        "Function"
                    ],
                    "usage": "optional",
                    "summary": "<p>Callback to be invoked when the promise is resolved.\nReceives the resolution value.</p>\n"
                },
                {
                    "name": "errback",
                    "types": [
                        "Function"
                    ],
                    "usage": "optional",
                    "summary": "<p>Callback to be invoked when the promise is rejected.\nReceives the rejection error.</p>\n"
                },
                {
                    "name": "progback",
                    "types": [
                        "Function"
                    ],
                    "usage": "optional",
                    "summary": "<p>Callback to be invoked when the promise emits a progress\nupdate. Receives the progress update.</p>\n"
                }
            ],
            "returnTypes": [
                "dojo/promise/Promise"
            ],
            "returnDescription": "<p>Returns a new promise for the result of the callback(s).\nThis can be used for chaining many asynchronous operations.</p>\n",
            "summary": "<p>Add new callbacks to the deferred.</p>\n",
            "description": "<p>Add new callbacks to the deferred. Callbacks can be added\nbefore or after the deferred is fulfilled.</p>\n"
        },
        {
            "name": "toString",
            "scope": "prototype",
            "types": [
                "function"
            ],
            "from": "dojo/Deferred",
            "parameters": [],
            "returnTypes": [
                "String"
            ],
            "returnDescription": "<p>Returns <code>[object Deferred]</code>.</p>\n"
        }
    ],
    "rootPath": "../../",
    "shortName": "Deferred"
}