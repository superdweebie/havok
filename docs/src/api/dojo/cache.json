{
    "location": "dojo/cache",
    "type": "function",
    "parameters": [
        {
            "name": "module",
            "types": [
                "String",
                "Object"
            ],
            "usage": "required",
            "summary": "<p>dojo/number</p>\n"
        },
        {
            "name": "url",
            "types": [
                "String"
            ],
            "usage": "required",
            "summary": "<p>The rest of the path to append to the path derived from the module argument. If\nmodule is an object, then this second argument should be the &quot;value&quot; argument instead.</p>\n"
        },
        {
            "name": "value",
            "types": [
                "String",
                "Object"
            ],
            "usage": "optional",
            "summary": "<p>If a String, the value to use in the cache for the module/url combination.\nIf an Object, it can have two properties: value and sanitize. The value property\nshould be the value to use in the cache, and sanitize can be set to true or false,\nto indicate if XML declarations should be removed from the value and if the HTML\ninside a body tag in the value should be extracted as the real value. The value argument\nor the value property on the value argument are usually only used by the build system\nas it inlines cache content.</p>\n"
        }
    ],
    "returnTypes": [
        "undefined",
        "null"
    ],
    "summary": "<p>A getter and setter for storing the string content associated with the\nmodule and url arguments.</p>\n",
    "description": "<p>If module is a string that contains slashes, then it is interpretted as a fully\nresolved path (typically a result returned by require.toUrl), and url should not be\nprovided. This is the preferred signature. If module is a string that does not\ncontain slashes, then url must also be provided and module and url are used to\ncall <code>dojo.moduleUrl()</code> to generate a module URL. This signature is deprecated.\nIf value is specified, the cache value for the moduleUrl will be set to\nthat value. Otherwise, dojo.cache will fetch the moduleUrl and store it\nin its internal cache and return that cached value for the URL. To clear\na cache value pass null for value. Since XMLHttpRequest (XHR) is used to fetch the\nthe URL contents, only modules on the same domain of the page can use this capability.\nThe build system can inline the cache values though, to allow for xdomain hosting.</p>\n",
    "examples": [
        "<p>To ask dojo.cache to fetch content and store it in the cache (the dojo[&quot;cache&quot;] style\nof call is used to avoid an issue with the build system erroneously trying to intern\nthis example. To get the build system to intern your dojo.cache calls, use the\n&quot;dojo.cache&quot; style of call):\n\n</p>\n//If template.html contains &quot;&lt;h1&gt;Hello&lt;/h1&gt;&quot; that will be\n//the value for the text variable.\nvar text = dojo[&quot;cache&quot;](&quot;my.module&quot;, &quot;template.html&quot;);\n",
        "<p>To ask dojo.cache to fetch content and store it in the cache, and sanitize the input\n (the dojo[&quot;cache&quot;] style of call is used to avoid an issue with the build system\nerroneously trying to intern this example. To get the build system to intern your\ndojo.cache calls, use the &quot;dojo.cache&quot; style of call):\n\n</p>\n//If template.html contains &quot;&lt;html&gt;&lt;body&gt;&lt;h1&gt;Hello&lt;/h1&gt;&lt;/body&gt;&lt;/html&gt;&quot;, the\n//text variable will contain just &quot;&lt;h1&gt;Hello&lt;/h1&gt;&quot;.\nvar text = dojo[&quot;cache&quot;](&quot;my.module&quot;, &quot;template.html&quot;, {sanitize: true});\n",
        "<p>Same example as previous, but demonstrates how an object can be passed in as\nthe first argument, then the value argument can then be the second argument.\n\n</p>\n//If template.html contains &quot;&lt;html&gt;&lt;body&gt;&lt;h1&gt;Hello&lt;/h1&gt;&lt;/body&gt;&lt;/html&gt;&quot;, the\n//text variable will contain just &quot;&lt;h1&gt;Hello&lt;/h1&gt;&quot;.\nvar text = dojo[&quot;cache&quot;](new dojo._Url(&quot;my/module/template.html&quot;), {sanitize: true});\n"
    ],
    "methods": [
        {
            "name": "constructor",
            "scope": "prototype",
            "types": [
                "function"
            ],
            "from": "dojo/text",
            "parameters": [
                {
                    "name": "module",
                    "types": [
                        "String",
                        "Object"
                    ],
                    "usage": "required",
                    "summary": "<p>dojo/number</p>\n"
                },
                {
                    "name": "url",
                    "types": [
                        "String"
                    ],
                    "usage": "required",
                    "summary": "<p>The rest of the path to append to the path derived from the module argument. If\nmodule is an object, then this second argument should be the &quot;value&quot; argument instead.</p>\n"
                },
                {
                    "name": "value",
                    "types": [
                        "String",
                        "Object"
                    ],
                    "usage": "optional",
                    "summary": "<p>If a String, the value to use in the cache for the module/url combination.\nIf an Object, it can have two properties: value and sanitize. The value property\nshould be the value to use in the cache, and sanitize can be set to true or false,\nto indicate if XML declarations should be removed from the value and if the HTML\ninside a body tag in the value should be extracted as the real value. The value argument\nor the value property on the value argument are usually only used by the build system\nas it inlines cache content.</p>\n"
                }
            ],
            "returnTypes": [
                "undefined",
                "null"
            ],
            "summary": "<p>A getter and setter for storing the string content associated with the\nmodule and url arguments.</p>\n",
            "description": "<p>If module is a string that contains slashes, then it is interpretted as a fully\nresolved path (typically a result returned by require.toUrl), and url should not be\nprovided. This is the preferred signature. If module is a string that does not\ncontain slashes, then url must also be provided and module and url are used to\ncall <code>dojo.moduleUrl()</code> to generate a module URL. This signature is deprecated.\nIf value is specified, the cache value for the moduleUrl will be set to\nthat value. Otherwise, dojo.cache will fetch the moduleUrl and store it\nin its internal cache and return that cached value for the URL. To clear\na cache value pass null for value. Since XMLHttpRequest (XHR) is used to fetch the\nthe URL contents, only modules on the same domain of the page can use this capability.\nThe build system can inline the cache values though, to allow for xdomain hosting.</p>\n",
            "examples": [
                "<p>To ask dojo.cache to fetch content and store it in the cache (the dojo[&quot;cache&quot;] style\nof call is used to avoid an issue with the build system erroneously trying to intern\nthis example. To get the build system to intern your dojo.cache calls, use the\n&quot;dojo.cache&quot; style of call):\n\n</p>\n//If template.html contains &quot;&lt;h1&gt;Hello&lt;/h1&gt;&quot; that will be\n//the value for the text variable.\nvar text = dojo[&quot;cache&quot;](&quot;my.module&quot;, &quot;template.html&quot;);\n",
                "<p>To ask dojo.cache to fetch content and store it in the cache, and sanitize the input\n (the dojo[&quot;cache&quot;] style of call is used to avoid an issue with the build system\nerroneously trying to intern this example. To get the build system to intern your\ndojo.cache calls, use the &quot;dojo.cache&quot; style of call):\n\n</p>\n//If template.html contains &quot;&lt;html&gt;&lt;body&gt;&lt;h1&gt;Hello&lt;/h1&gt;&lt;/body&gt;&lt;/html&gt;&quot;, the\n//text variable will contain just &quot;&lt;h1&gt;Hello&lt;/h1&gt;&quot;.\nvar text = dojo[&quot;cache&quot;](&quot;my.module&quot;, &quot;template.html&quot;, {sanitize: true});\n",
                "<p>Same example as previous, but demonstrates how an object can be passed in as\nthe first argument, then the value argument can then be the second argument.\n\n</p>\n//If template.html contains &quot;&lt;html&gt;&lt;body&gt;&lt;h1&gt;Hello&lt;/h1&gt;&lt;/body&gt;&lt;/html&gt;&quot;, the\n//text variable will contain just &quot;&lt;h1&gt;Hello&lt;/h1&gt;&quot;.\nvar text = dojo[&quot;cache&quot;](new dojo._Url(&quot;my/module/template.html&quot;), {sanitize: true});\n"
            ]
        }
    ],
    "apiPath": "../",
    "shortName": "cache"
}