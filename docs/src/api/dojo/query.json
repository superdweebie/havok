{
    "location": "dojo/query",
    "type": "function",
    "parameters": [
        {
            "name": "selector",
            "types": [
                "String"
            ],
            "usage": "required",
            "summary": "<p>A CSS selector to search for.</p>\n"
        },
        {
            "name": "context",
            "types": [
                "String",
                "DomNode"
            ],
            "usage": "optional",
            "summary": "<p>An optional context to limit the searching scope. Only nodes under <code>context</code> will be\nscanned.</p>\n"
        }
    ],
    "returnTypes": [
        "instance"
    ],
    "summary": "<p>This modules provides DOM querying functionality. The module export is a function\nthat can be used to query for DOM nodes by CSS selector and returns a NodeList\nrepresenting the matching nodes.</p>\n",
    "description": "<p>dojo/query is responsible for loading the appropriate query engine and wrapping\nits results with a <code>NodeList</code>. You can use dojo/query with a specific selector engine\nby using it as a plugin. For example, if you installed the sizzle package, you could\nuse it as the selector engine with:\n\n</p>\nrequire([&quot;dojo/query!sizzle&quot;], function(query){\n    query(&quot;div&quot;)...\n<p>The id after the ! can be a module id of the selector engine or one of the following values:\n\n</p>\n<ul>\n<li><p>acme: This is the default engine used by Dojo base, and will ensure that the full\nAcme engine is always loaded.</p>\n</li>\n<li><p>css2: If the browser has a native selector engine, this will be used, otherwise a\nvery minimal lightweight selector engine will be loaded that can do simple CSS2 selectors\n(by #id, .class, tag, and [name=value] attributes, with standard child or descendant (&gt;)\noperators) and nothing more.</p>\n</li>\n<li><p>css2.1: If the browser has a native selector engine, this will be used, otherwise the\nfull Acme engine will be loaded.</p>\n</li>\n<li><p>css3: If the browser has a native selector engine with support for CSS3 pseudo\nselectors (most modern browsers except IE8), this will be used, otherwise the\nfull Acme engine will be loaded.</p>\n</li>\n<li><p>Or the module id of a selector engine can be used to explicitly choose the selector engine</p>\n</li>\n</ul>\n<p>For example, if you are using CSS3 pseudo selectors in module, you can specify that\nyou will need support them with:\n\n</p>\nrequire([&quot;dojo/query!css3&quot;], function(query){\n    query(&#39;#t &gt; h3:nth-child(odd)&#39;)...\n<p>You can also choose the selector engine/load configuration by setting the query-selector:\nFor example:\n\n</p>\n&lt;script data-dojo-config=&quot;query-selector:&#39;css3&#39;&quot; src=&quot;dojo.js&quot;&gt;&lt;/script&gt;\n",
    "examples": [
        "<p>add an onclick handler to every submit button in the document\nwhich causes the form to be sent via Ajax instead:\n\n</p>\nrequire([&quot;dojo/query&quot;], function(query){\n    query(&quot;input[type=&#39;submit&#39;]&quot;).on(&quot;click&quot;, function(e){\n        dojo.stopEvent(e); // prevent sending the form\n        var btn = e.target;\n        dojo.xhrPost({\n            form: btn.form,\n            load: function(data){\n                // replace the form with the response\n                var div = dojo.doc.createElement(&quot;div&quot;);\n                dojo.place(div, btn.form, &quot;after&quot;);\n                div.innerHTML = data;\n                dojo.style(btn.form, &quot;display&quot;, &quot;none&quot;);\n            }\n        });\n    });\n});\n"
    ],
    "methods": [
        {
            "name": "_filterResult",
            "scope": "normal",
            "types": [
                "function"
            ],
            "from": "dojo/query",
            "private": true,
            "parameters": [
                {
                    "name": "nodes",
                    "types": [
                        "undefined"
                    ],
                    "usage": "required"
                },
                {
                    "name": "selector",
                    "types": [
                        "undefined"
                    ],
                    "usage": "required"
                },
                {
                    "name": "root",
                    "types": [
                        "undefined"
                    ],
                    "usage": "required"
                }
            ],
            "returnTypes": []
        },
        {
            "name": "constructor",
            "scope": "prototype",
            "types": [
                "function"
            ],
            "from": "dojo/query",
            "parameters": [
                {
                    "name": "selector",
                    "types": [
                        "String"
                    ],
                    "usage": "required",
                    "summary": "<p>A CSS selector to search for.</p>\n"
                },
                {
                    "name": "context",
                    "types": [
                        "String",
                        "DomNode"
                    ],
                    "usage": "optional",
                    "summary": "<p>An optional context to limit the searching scope. Only nodes under <code>context</code> will be\nscanned.</p>\n"
                }
            ],
            "returnTypes": [
                "instance"
            ],
            "summary": "<p>This modules provides DOM querying functionality. The module export is a function\nthat can be used to query for DOM nodes by CSS selector and returns a NodeList\nrepresenting the matching nodes.</p>\n",
            "description": "<p>dojo/query is responsible for loading the appropriate query engine and wrapping\nits results with a <code>NodeList</code>. You can use dojo/query with a specific selector engine\nby using it as a plugin. For example, if you installed the sizzle package, you could\nuse it as the selector engine with:\n\n</p>\nrequire([&quot;dojo/query!sizzle&quot;], function(query){\n    query(&quot;div&quot;)...\n<p>The id after the ! can be a module id of the selector engine or one of the following values:\n\n</p>\n<ul>\n<li><p>acme: This is the default engine used by Dojo base, and will ensure that the full\nAcme engine is always loaded.</p>\n</li>\n<li><p>css2: If the browser has a native selector engine, this will be used, otherwise a\nvery minimal lightweight selector engine will be loaded that can do simple CSS2 selectors\n(by #id, .class, tag, and [name=value] attributes, with standard child or descendant (&gt;)\noperators) and nothing more.</p>\n</li>\n<li><p>css2.1: If the browser has a native selector engine, this will be used, otherwise the\nfull Acme engine will be loaded.</p>\n</li>\n<li><p>css3: If the browser has a native selector engine with support for CSS3 pseudo\nselectors (most modern browsers except IE8), this will be used, otherwise the\nfull Acme engine will be loaded.</p>\n</li>\n<li><p>Or the module id of a selector engine can be used to explicitly choose the selector engine</p>\n</li>\n</ul>\n<p>For example, if you are using CSS3 pseudo selectors in module, you can specify that\nyou will need support them with:\n\n</p>\nrequire([&quot;dojo/query!css3&quot;], function(query){\n    query(&#39;#t &gt; h3:nth-child(odd)&#39;)...\n<p>You can also choose the selector engine/load configuration by setting the query-selector:\nFor example:\n\n</p>\n&lt;script data-dojo-config=&quot;query-selector:&#39;css3&#39;&quot; src=&quot;dojo.js&quot;&gt;&lt;/script&gt;\n",
            "examples": [
                "<p>add an onclick handler to every submit button in the document\nwhich causes the form to be sent via Ajax instead:\n\n</p>\nrequire([&quot;dojo/query&quot;], function(query){\n    query(&quot;input[type=&#39;submit&#39;]&quot;).on(&quot;click&quot;, function(e){\n        dojo.stopEvent(e); // prevent sending the form\n        var btn = e.target;\n        dojo.xhrPost({\n            form: btn.form,\n            load: function(data){\n                // replace the form with the response\n                var div = dojo.doc.createElement(&quot;div&quot;);\n                dojo.place(div, btn.form, &quot;after&quot;);\n                div.innerHTML = data;\n                dojo.style(btn.form, &quot;display&quot;, &quot;none&quot;);\n            }\n        });\n    });\n});\n"
            ]
        },
        {
            "name": "load",
            "scope": "normal",
            "types": [
                "function"
            ],
            "from": "dojo/query",
            "parameters": [
                {
                    "name": "id",
                    "types": [
                        "undefined"
                    ],
                    "usage": "required"
                },
                {
                    "name": "parentRequire",
                    "types": [
                        "undefined"
                    ],
                    "usage": "required"
                },
                {
                    "name": "loaded",
                    "types": [
                        "undefined"
                    ],
                    "usage": "required"
                }
            ],
            "returnTypes": [],
            "summary": "<p>can be used as AMD plugin to conditionally load new query engine</p>\n",
            "examples": [
                "require([&quot;dojo/query!custom&quot;], function(qsa){\n    // loaded selector/custom.js as engine\n    qsa(&quot;#foobar&quot;).forEach(...);\n});\n"
            ]
        },
        {
            "name": "NodeList",
            "scope": "normal",
            "types": [
                "function"
            ],
            "from": "dojo/query",
            "parameters": [
                {
                    "name": "array",
                    "types": [
                        "undefined"
                    ],
                    "usage": "required"
                }
            ],
            "returnTypes": [
                "Array"
            ],
            "summary": "<p>Array-like object which adds syntactic\nsugar for chaining, common iteration operations, animation, and\nnode manipulation. NodeLists are most often returned as the\nresult of dojo.query() calls.</p>\n",
            "description": "<p>NodeList instances provide many utilities that reflect\ncore Dojo APIs for Array iteration and manipulation, DOM\nmanipulation, and event handling. Instead of needing to dig up\nfunctions in the dojo.* namespace, NodeLists generally make the\nfull power of Dojo available for DOM manipulation tasks in a\nsimple, chainable way.</p>\n",
            "examples": [
                "<p>create a node list from a node\n\n</p>\nnew query.NodeList(dojo.byId(&quot;foo&quot;));\n",
                "<p>get a NodeList from a CSS query and iterate on it\n\n</p>\nvar l = dojo.query(&quot;.thinger&quot;);\nl.forEach(function(node, index, nodeList){\n    console.log(index, node.innerHTML);\n});\n",
                "<p>use native and Dojo-provided array methods to manipulate a\nNodeList without needing to use dojo.* functions explicitly:\n\n</p>\nvar l = dojo.query(&quot;.thinger&quot;);\n// since NodeLists are real arrays, they have a length\n// property that is both readable and writable and\n// push/pop/shift/unshift methods\nconsole.log(l.length);\nl.push(dojo.create(&quot;span&quot;));\n\n// dojo&#39;s normalized array methods work too:\nconsole.log( l.indexOf(dojo.byId(&quot;foo&quot;)) );\n// ...including the special &quot;function as string&quot; shorthand\nconsole.log( l.every(&quot;item.nodeType == 1&quot;) );\n\n// NodeLists can be [..] indexed, or you can use the at()\n// function to get specific items wrapped in a new NodeList:\nvar node = l[3]; // the 4th element\nvar newList = l.at(1, 3); // the 2nd and 4th elements\n",
                "<p>the style functions you expect are all there too:\n\n</p>\n// style() as a getter...\nvar borders = dojo.query(&quot;.thinger&quot;).style(&quot;border&quot;);\n// ...and as a setter:\ndojo.query(&quot;.thinger&quot;).style(&quot;border&quot;, &quot;1px solid black&quot;);\n// class manipulation\ndojo.query(&quot;li:nth-child(even)&quot;).addClass(&quot;even&quot;);\n// even getting the coordinates of all the items\nvar coords = dojo.query(&quot;.thinger&quot;).coords();\n",
                "<p>DOM manipulation functions from the dojo.* namespace area also available:\n\n</p>\n// remove all of the elements in the list from their\n// parents (akin to &quot;deleting&quot; them from the document)\ndojo.query(&quot;.thinger&quot;).orphan();\n// place all elements in the list at the front of #foo\ndojo.query(&quot;.thinger&quot;).place(&quot;foo&quot;, &quot;first&quot;);\n",
                "<p>Event handling couldn&#39;t be easier. <code>dojo.connect</code> is mapped in,\nand shortcut handlers are provided for most DOM events:\n\n</p>\n// like dojo.connect(), but with implicit scope\ndojo.query(&quot;li&quot;).connect(&quot;onclick&quot;, console, &quot;log&quot;);\n\n// many common event handlers are already available directly:\ndojo.query(&quot;li&quot;).onclick(console, &quot;log&quot;);\nvar toggleHovered = dojo.hitch(dojo, &quot;toggleClass&quot;, &quot;hovered&quot;);\ndojo.query(&quot;p&quot;)\n    .onmouseenter(toggleHovered)\n    .onmouseleave(toggleHovered);\n",
                "<p>chainability is a key advantage of NodeLists:\n\n</p>\ndojo.query(&quot;.thinger&quot;)\n    .onclick(function(e){ /* ... */ })\n    .at(1, 3, 8) // get a subset\n        .style(&quot;padding&quot;, &quot;5px&quot;)\n        .forEach(console.log);\n"
            ]
        }
    ],
    "apiPath": "../",
    "shortName": "query"
}