{
    "location": "dojo/i18n",
    "type": "object",
    "summary": "<p>This module implements the dojo/i18n! plugin and the v1.6- i18n API</p>\n",
    "description": "<p>We choose to include our own plugin to leverage functionality already contained in dojo\nand thereby reduce the size of the plugin compared to various loader implementations. Also, this\nallows foreign AMD loaders to be used without their plugins.</p>\n",
    "properties": [
        {
            "name": "cache",
            "scope": "normal",
            "types": [
                "object"
            ],
            "from": "dojo/i18n"
        },
        {
            "name": "dynamic",
            "scope": "normal",
            "types": [
                "boolean"
            ],
            "from": "dojo/i18n"
        },
        {
            "name": "unitTests",
            "scope": "normal",
            "types": [
                "Array"
            ],
            "from": "dojo/i18n"
        }
    ],
    "methods": [
        {
            "name": "_preloadLocalizations",
            "scope": "normal",
            "types": [
                "function"
            ],
            "from": "dojo/i18n",
            "private": true,
            "parameters": [
                {
                    "name": "bundlePrefix",
                    "types": [
                        "String"
                    ],
                    "usage": "required"
                },
                {
                    "name": "localesGenerated",
                    "types": [
                        "Array"
                    ],
                    "usage": "required"
                },
                {
                    "name": "guaranteedAmdFormat",
                    "types": [
                        "boolean"
                    ],
                    "usage": "optional"
                },
                {
                    "name": "contextRequire",
                    "types": [
                        "function"
                    ],
                    "usage": "optional"
                }
            ],
            "returnTypes": [],
            "summary": "<p>Load available flattened resource bundles associated with a particular module for dojo/locale and all dojo/config.extraLocale (if any)</p>\n",
            "description": "<p>Only called by built layer files. The entire locale hierarchy is loaded. For example,\nif locale==&quot;ab-cd&quot;, then ROOT, &quot;ab&quot;, and &quot;ab-cd&quot; are loaded. This is different than v1.6-\nin that the v1.6- would only load ab-cd...which was <em>always</em> flattened.\n\n</p>\n<p>If guaranteedAmdFormat is true, then the module can be loaded with require thereby circumventing the detection algorithm\nand the extra possible extra transaction.</p>\n"
        },
        {
            "name": "getL10nName",
            "scope": "normal",
            "types": [
                "function"
            ],
            "from": "dojo/i18n",
            "parameters": [
                {
                    "name": "moduleName",
                    "types": [
                        "undefined"
                    ],
                    "usage": "required"
                },
                {
                    "name": "bundleName",
                    "types": [
                        "undefined"
                    ],
                    "usage": "required"
                },
                {
                    "name": "locale",
                    "types": [
                        "undefined"
                    ],
                    "usage": "required"
                }
            ],
            "returnTypes": [
                "string"
            ]
        },
        {
            "name": "getLocalization",
            "scope": "normal",
            "types": [
                "function"
            ],
            "from": "dojo/i18n",
            "parameters": [
                {
                    "name": "moduleName",
                    "types": [
                        "undefined"
                    ],
                    "usage": "required"
                },
                {
                    "name": "bundleName",
                    "types": [
                        "undefined"
                    ],
                    "usage": "required"
                },
                {
                    "name": "locale",
                    "types": [
                        "undefined"
                    ],
                    "usage": "required"
                }
            ],
            "returnTypes": [
                "undefined"
            ]
        },
        {
            "name": "load",
            "scope": "normal",
            "types": [
                "function"
            ],
            "from": "dojo/i18n",
            "parameters": [
                {
                    "name": "id",
                    "types": [
                        "undefined"
                    ],
                    "usage": "required"
                },
                {
                    "name": "require",
                    "types": [
                        "undefined"
                    ],
                    "usage": "required"
                },
                {
                    "name": "load",
                    "types": [
                        "undefined"
                    ],
                    "usage": "required"
                }
            ],
            "returnTypes": [],
            "summary": "<p>id is in one of the following formats\n\n</p>\n<ol>\n<li><p><path>/nls/<bundle>\n =&gt; load the bundle, localized to config.locale; load all bundles localized to\n config.extraLocale (if any); return the loaded bundle localized to config.locale.</p>\n</li>\n<li><p><path>/nls/<locale>/<bundle>\n =&gt; load then return the bundle localized to <locale></p>\n</li>\n<li><p><em>preload</em><path>/nls/<module>*<JSON array of available locales>\n =&gt; for config.locale and all config.extraLocale, load all bundles found\n in the best-matching bundle rollup. A value of 1 is returned, which\n is meaningless other than to say the plugin is executing the requested\n preloads</p>\n</li>\n</ol>\n<p>In cases 1 and 2, <path> is always normalized to an absolute module id upon entry; see\nnormalize. In case 3, it <path> is assumed to be absolute; this is arranged by the builder.\n\n</p>\n<p>To load a bundle means to insert the bundle into the plugin&#39;s cache and publish the bundle\nvalue to the loader. Given <path>, <bundle>, and a particular <locale>, the cache key\n\n</p>\n&lt;path&gt;/nls/&lt;bundle&gt;/&lt;locale&gt;\n<p>will hold the value. Similarly, then plugin will publish this value to the loader by\n\n</p>\ndefine(&quot;&lt;path&gt;/nls/&lt;bundle&gt;/&lt;locale&gt;&quot;, &lt;bundle-value&gt;);\n<p>Given this algorithm, other machinery can provide fast load paths be preplacing\nvalues in the plugin&#39;s cache, which is public. When a load is demanded the\ncache is inspected before starting any loading. Explicitly placing values in the plugin\ncache is an advanced/experimental feature that should not be needed; use at your own risk.\n\n</p>\n<p>For the normal AMD algorithm, the root bundle is loaded first, which instructs the\nplugin what additional localized bundles are required for a particular locale. These\nadditional locales are loaded and a mix of the root and each progressively-specific\nlocale is returned. For example:\n\n</p>\n<ol>\n<li><p>The client demands &quot;dojo/i18n!some/path/nls/someBundle</p>\n</li>\n<li><p>The loader demands load(some/path/nls/someBundle)</p>\n</li>\n<li><p>This plugin require&#39;s &quot;some/path/nls/someBundle&quot;, which is the root bundle.</p>\n</li>\n<li><p>Assuming config.locale is &quot;ab-cd-ef&quot; and the root bundle indicates that localizations\nare available for &quot;ab&quot; and &quot;ab-cd-ef&quot; (note the missing &quot;ab-cd&quot;, then the plugin\nrequires &quot;some/path/nls/ab/someBundle&quot; and &quot;some/path/nls/ab-cd-ef/someBundle&quot;</p>\n</li>\n<li><p>Upon receiving all required bundles, the plugin constructs the value of the bundle\nab-cd-ef as...</p>\n mixin(mixin(mixin({}, require(&quot;some/path/nls/someBundle&quot;),\n     require(&quot;some/path/nls/ab/someBundle&quot;)),\n     require(&quot;some/path/nls/ab-cd-ef/someBundle&quot;));\n</li>\n</ol>\n<p>This value is inserted into the cache and published to the loader at the\nkey/module-id some/path/nls/someBundle/ab-cd-ef.\n\n</p>\n<p>The special preload signature (case 3) instructs the plugin to stop servicing all normal requests\n(further preload requests will be serviced) until all ongoing preloading has completed.\n\n</p>\n<p>The preload signature instructs the plugin that a special rollup module is available that contains\none or more flattened, localized bundles. The JSON array of available locales indicates which locales\nare available. Here is an example:\n\n</p>\n*preload*some/path/nls/someModule*[&quot;root&quot;, &quot;ab&quot;, &quot;ab-cd-ef&quot;]\n<p>This indicates the following rollup modules are available:\n\n</p>\nsome/path/nls/someModule_ROOT\nsome/path/nls/someModule_ab\nsome/path/nls/someModule_ab-cd-ef\n<p>Each of these modules is a normal AMD module that contains one or more flattened bundles in a hash.\nFor example, assume someModule contained the bundles some/bundle/path/someBundle and\nsome/bundle/path/someOtherBundle, then some/path/nls/someModule_ab would be expressed as follows:\n\n</p>\ndefine({\n    some/bundle/path/someBundle:&lt;value of someBundle, flattened with respect to locale ab&gt;,\n    some/bundle/path/someOtherBundle:&lt;value of someOtherBundle, flattened with respect to locale ab&gt;,\n});\n<p>E.g., given this design, preloading for locale==&quot;ab&quot; can execute the following algorithm:\n\n</p>\nrequire([&quot;some/path/nls/someModule_ab&quot;], function(rollup){\n    for(var p in rollup){\n        var id = p + &quot;/ab&quot;,\n        cache[id] = rollup[p];\n        define(id, rollup[p]);\n    }\n});\n<p>Similarly, if &quot;ab-cd&quot; is requested, the algorithm can determine that &quot;ab&quot; is the best available and\nload accordingly.\n\n</p>\n<p>The builder will write such rollups for every layer if a non-empty localeList  profile property is\nprovided. Further, the builder will include the following cache entry in the cache associated with\nany layer.\n\n</p>\n&quot;*now&quot;:function(r){r([&#39;dojo/i18n!*preload*&lt;path&gt;/nls/&lt;module&gt;*&lt;JSON array of available locales&gt;&#39;]);}\n<p>The *now special cache module instructs the loader to apply the provided function to context-require\nwith respect to the particular layer being defined. This causes the plugin to hold all normal service\nrequests until all preloading is complete.\n\n</p>\n<p>Notice that this algorithm is rarely better than the standard AMD load algorithm. Consider the normal case\nwhere the target locale has a single segment and a layer depends on a single bundle:\n\n</p>\n<p>Without Preloads:\n\n</p>\n<ol>\n<li>Layer loads root bundle.</li>\n<li>bundle is demanded; plugin loads single localized bundle.</li>\n</ol>\n<p>With Preloads:\n\n</p>\n<ol>\n<li>Layer causes preloading of target bundle.</li>\n<li>bundle is demanded; service is delayed until preloading complete; bundle is returned.</li>\n</ol>\n<p>In each case a single transaction is required to load the target bundle. In cases where multiple bundles\nare required and/or the locale has multiple segments, preloads still requires a single transaction whereas\nthe normal path requires an additional transaction for each additional bundle/locale-segment. However all\nof these additional transactions can be done concurrently. Owing to this analysis, the entire preloading\nalgorithm can be discard during a build by setting the has feature dojo-preload-i18n-Api to false.</p>\n"
        },
        {
            "name": "normalize",
            "scope": "normal",
            "types": [
                "function"
            ],
            "from": "dojo/i18n",
            "parameters": [
                {
                    "name": "id",
                    "types": [
                        "undefined"
                    ],
                    "usage": "required"
                },
                {
                    "name": "toAbsMid",
                    "types": [
                        "undefined"
                    ],
                    "usage": "required"
                }
            ],
            "returnTypes": [
                "undefined"
            ],
            "summary": "<p>id may be relative.\npreload has form <code>*preload*&lt;path&gt;/nls/&lt;module&gt;*&lt;flattened locales&gt;</code> and\ntherefore never looks like a relative</p>\n"
        },
        {
            "name": "normalizeLocale",
            "scope": "normal",
            "types": [
                "function"
            ],
            "from": "dojo/i18n",
            "parameters": [
                {
                    "name": "locale",
                    "types": [
                        "undefined"
                    ],
                    "usage": "required"
                }
            ],
            "returnTypes": [
                "String"
            ],
            "returnDescription": "<p>The locale to assume for loading localized resources in this page,\nspecified according to <a href=\"http://www.ietf.org/rfc/rfc3066.txt\">RFC 3066</a>.\nMust be specified entirely in lowercase, e.g. <code>en-us</code> and <code>zh-cn</code>.\nSee the documentation for <code>dojo.i18n</code> and <code>dojo.requireLocalization</code>\nfor details on loading localized resources. If no locale is specified,\nDojo assumes the locale of the user agent, according to <code>navigator.userLanguage</code>\nor <code>navigator.language</code> properties.</p>\n"
        }
    ]
}