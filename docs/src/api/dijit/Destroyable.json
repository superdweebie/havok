{
    "location": "dijit/Destroyable",
    "type": "constructor",
    "classlike": true,
    "summary": "<p>Mixin to track handles and release them when instance is destroyed.</p>\n",
    "description": "<p>Call this.own(...) on list of handles (returned from dojo/aspect, dojo/on,\ndojo/Stateful::watch, or any class (including widgets) with a destroyRecursive() or destroy() method.\nThen call destroy() later to destroy this instance and release the resources.</p>\n",
    "methods": [
        {
            "name": "destroy",
            "scope": "prototype",
            "types": [
                "function"
            ],
            "from": "dijit/Destroyable",
            "parameters": [
                {
                    "name": "preserveDom",
                    "types": [
                        "Boolean"
                    ],
                    "usage": "required"
                }
            ],
            "returnTypes": [],
            "summary": "<p>Destroy this class, releasing any resources registered via own().</p>\n"
        },
        {
            "name": "own",
            "scope": "prototype",
            "types": [
                "function"
            ],
            "from": "dijit/Destroyable",
            "tags": [
                "protected"
            ],
            "parameters": [],
            "returnTypes": [
                "any",
                "undefined"
            ],
            "returnDescription": "<p>The array of specified handles, so you can do for example:\n\n</p>\nvar handle = this.own(on(...))[0];\n",
            "summary": "<p>Track specified handles and remove/destroy them when this instance is destroyed, unless they were\nalready removed/destroyed manually.</p>\n"
        }
    ],
    "rootPath": "../../",
    "shortName": "Destroyable"
}