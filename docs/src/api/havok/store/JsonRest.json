{
    "location": "havok/store/JsonRest",
    "type": "constructor",
    "classlike": true,
    "superclass": "dojo/store/JsonRest",
    "mixins": [
        "dojo/store/JsonRest"
    ],
    "parameters": [
        {
            "name": "options",
            "types": [
                "dojo/store/JsonRest"
            ],
            "usage": "required",
            "summary": "<p>This provides any configuration information that will be mixed into the store</p>\n"
        }
    ],
    "returnTypes": [],
    "summary": "<p>A standard dojo/store/JsonRest store with a few\ntweaks to make it work better with zf2 services</p>\n",
    "properties": [
        {
            "name": "-chains-",
            "scope": "prototype",
            "types": [
                "object"
            ],
            "from": "havok/store/JsonRest"
        },
        {
            "name": "accepts",
            "scope": "prototype",
            "types": [
                "String"
            ],
            "from": "dojo/store/JsonRest",
            "summary": "<p>Defines the Accept header to use on HTTP requests</p>\n"
        },
        {
            "name": "ascendingPrefix",
            "scope": "prototype",
            "types": [
                "String"
            ],
            "from": "dojo/store/JsonRest",
            "summary": "<p>The prefix to apply to sort attribute names that are ascending</p>\n"
        },
        {
            "name": "descendingPrefix",
            "scope": "prototype",
            "types": [
                "String"
            ],
            "from": "dojo/store/JsonRest",
            "summary": "<p>The prefix to apply to sort attribute names that are ascending</p>\n"
        },
        {
            "name": "headers",
            "scope": "prototype",
            "types": [
                "Object"
            ],
            "from": "havok/store/JsonRest",
            "summary": "<p>Additional headers to pass in all requests to the server. These can be overridden\nby passing additional headers to calls to the store.</p>\n"
        },
        {
            "name": "idProperty",
            "scope": "prototype",
            "types": [
                "String"
            ],
            "from": "dojo/store/JsonRest",
            "summary": "<p>Indicates the property to use as the identity property. The values of this\nproperty should be unique.</p>\n"
        },
        {
            "name": "queryEngine",
            "scope": "prototype",
            "types": [
                "Function"
            ],
            "from": "dojo/store/api/Store",
            "summary": "<p>If the store can be queried locally (on the client side in JS), this defines\nthe query engine to use for querying the data store.\nThis takes a query and query options and returns a function that can execute\nthe provided query on a JavaScript array. The queryEngine may be replace to\nprovide more sophisticated querying capabilities. For example:\n\n</p>\nvar query = store.queryEngine({foo:&quot;bar&quot;}, {count:10});\nquery(someArray) -&gt; filtered array\n<p>The returned query function may have a &quot;matches&quot; property that can be\n\n</p>\n<p>used to determine if an object matches the query. For example:\n\n</p>\nquery.matches({id:&quot;some-object&quot;, foo:&quot;bar&quot;}) -&gt; true\nquery.matches({id:&quot;some-object&quot;, foo:&quot;something else&quot;}) -&gt; false\n"
        },
        {
            "name": "target",
            "scope": "prototype",
            "types": [
                "String"
            ],
            "from": "dojo/store/JsonRest",
            "summary": "<p>The target base URL to use for all requests to the server. This string will be\nprepended to the id to generate the URL (relative or absolute) for requests\nsent to the server</p>\n"
        }
    ],
    "methods": [
        {
            "name": "add",
            "scope": "prototype",
            "types": [
                "function"
            ],
            "from": "dojo/store/JsonRest",
            "parameters": [
                {
                    "name": "object",
                    "types": [
                        "Object"
                    ],
                    "usage": "required",
                    "summary": "<p>The object to store.</p>\n"
                },
                {
                    "name": "options",
                    "types": [
                        "Object"
                    ],
                    "usage": "optional",
                    "summary": "<p>Additional metadata for storing the data.  Includes an &quot;id&quot;\nproperty if a specific id is to be used.</p>\n",
                    "description": "<p>An object with the following properties:</p><ul><li>headers (Object, optional): <p>Additional headers to send along with the request.</p>\n</li><li>id (String|Number, optional): <p>Indicates the identity of the object if a new object is created</p>\n</li><li>before (Object, optional): <p>If the collection of objects in the store has a natural ordering,\nthis indicates that the created or updated object should be placed before the\nobject specified by the value of this property. A value of null indicates that the\nobject should be last.</p>\n</li><li>parent: <p>If the store is hierarchical (with single parenting) this property indicates the\nnew parent of the created or updated object.</p>\n</li><li>overwrite (Boolean, optional): <p>If this is provided as a boolean it indicates that the object should or should not\noverwrite an existing object. A value of true indicates that a new object\nshould not be created, the operation should update an existing object. A\nvalue of false indicates that an existing object should not be updated, a new\nobject should be created (which is the same as an add() operation). When\nthis property is not provided, either an update or creation is acceptable.</p>\n</li><li>sort (dojo/store/api/Store.SortInformation[], optional): <p>A list of attributes to sort on, as well as direction\nFor example:\n\n</p>\n[{attribute:&quot;price, descending: true}].\n<p>If the sort parameter is omitted, then the natural order of the store may be\n\n</p>\n<p>applied if there is a natural order.</p>\n</li><li>start (Number, optional): <p>The first result to begin iteration on</p>\n</li><li>count (Number, optional): <p>The number of how many results should be returned.</p>\n</li></ul>"
                }
            ],
            "returnTypes": [
                "undefined"
            ],
            "summary": "<p>Adds an object. This will trigger a PUT request to the server\nif the object has an id, otherwise it will trigger a POST request.</p>\n"
        },
        {
            "name": "constructor",
            "scope": "prototype",
            "types": [
                "function"
            ],
            "from": "havok/store/JsonRest",
            "parameters": [
                {
                    "name": "options",
                    "types": [
                        "dojo/store/JsonRest"
                    ],
                    "usage": "required",
                    "summary": "<p>This provides any configuration information that will be mixed into the store</p>\n"
                }
            ],
            "returnTypes": [],
            "summary": "<p>This is a basic store for RESTful communicating with a server through JSON\nformatted data.</p>\n"
        },
        {
            "name": "get",
            "scope": "prototype",
            "types": [
                "function"
            ],
            "from": "dojo/store/JsonRest",
            "parameters": [
                {
                    "name": "id",
                    "types": [
                        "Number"
                    ],
                    "usage": "required",
                    "summary": "<p>The identity to use to lookup the object</p>\n"
                },
                {
                    "name": "options",
                    "types": [
                        "Object"
                    ],
                    "usage": "optional",
                    "summary": "<p>HTTP headers. For consistency with other methods, if a <code>headers</code> key exists on this object, it will be\nused to provide HTTP headers instead.</p>\n"
                }
            ],
            "returnTypes": [
                "Object",
                "undefined"
            ],
            "returnDescription": "<p>The object in the store that matches the given id.</p>\n",
            "summary": "<p>Retrieves an object by its identity. This will trigger a GET request to the server using\nthe url <code>this.target + id</code>.</p>\n"
        },
        {
            "name": "getChildren",
            "scope": "prototype",
            "types": [
                "function"
            ],
            "from": "dojo/store/api/Store",
            "parameters": [
                {
                    "name": "parent",
                    "types": [
                        "Object"
                    ],
                    "usage": "required",
                    "summary": "<p>The object to find the children of.</p>\n"
                },
                {
                    "name": "options",
                    "types": [
                        "dojo/store/api/Store.QueryOptions"
                    ],
                    "usage": "optional",
                    "summary": "<p>Additional options to apply to the retrieval of the children.</p>\n"
                }
            ],
            "returnTypes": [
                "dojo/store/api/Store.QueryResults"
            ],
            "returnDescription": "<p>A result set of the children of the parent object.</p>\n",
            "summary": "<p>Retrieves the children of an object.</p>\n"
        },
        {
            "name": "getIdentity",
            "scope": "prototype",
            "types": [
                "function"
            ],
            "from": "dojo/store/JsonRest",
            "parameters": [
                {
                    "name": "object",
                    "types": [
                        "Object"
                    ],
                    "usage": "required",
                    "summary": "<p>The object to get the identity from</p>\n"
                }
            ],
            "returnTypes": [
                "Number",
                "undefined"
            ],
            "summary": "<p>Returns an object&#39;s identity</p>\n"
        },
        {
            "name": "getMetadata",
            "scope": "prototype",
            "types": [
                "function"
            ],
            "from": "dojo/store/api/Store",
            "parameters": [
                {
                    "name": "object",
                    "types": [
                        "Object"
                    ],
                    "usage": "required",
                    "summary": "<p>The object to return metadata for.</p>\n"
                }
            ],
            "returnTypes": [
                "Object"
            ],
            "returnDescription": "<p>An object containing metadata.</p>\n",
            "summary": "<p>Returns any metadata about the object. This may include attribution,\ncache directives, history, or version information.</p>\n"
        },
        {
            "name": "put",
            "scope": "prototype",
            "types": [
                "function"
            ],
            "from": "dojo/store/JsonRest",
            "parameters": [
                {
                    "name": "object",
                    "types": [
                        "Object"
                    ],
                    "usage": "required",
                    "summary": "<p>The object to store.</p>\n"
                },
                {
                    "name": "options",
                    "types": [
                        "Object"
                    ],
                    "usage": "optional",
                    "summary": "<p>Additional metadata for storing the data.  Includes an &quot;id&quot;\nproperty if a specific id is to be used.</p>\n",
                    "description": "<p>An object with the following properties:</p><ul><li>headers (Object, optional): <p>Additional headers to send along with the request.</p>\n</li><li>id (String|Number, optional): <p>Indicates the identity of the object if a new object is created</p>\n</li><li>before (Object, optional): <p>If the collection of objects in the store has a natural ordering,\nthis indicates that the created or updated object should be placed before the\nobject specified by the value of this property. A value of null indicates that the\nobject should be last.</p>\n</li><li>parent: <p>If the store is hierarchical (with single parenting) this property indicates the\nnew parent of the created or updated object.</p>\n</li><li>overwrite (Boolean, optional): <p>If this is provided as a boolean it indicates that the object should or should not\noverwrite an existing object. A value of true indicates that a new object\nshould not be created, the operation should update an existing object. A\nvalue of false indicates that an existing object should not be updated, a new\nobject should be created (which is the same as an add() operation). When\nthis property is not provided, either an update or creation is acceptable.</p>\n</li><li>sort (dojo/store/api/Store.SortInformation[], optional): <p>A list of attributes to sort on, as well as direction\nFor example:\n\n</p>\n[{attribute:&quot;price, descending: true}].\n<p>If the sort parameter is omitted, then the natural order of the store may be\n\n</p>\n<p>applied if there is a natural order.</p>\n</li><li>start (Number, optional): <p>The first result to begin iteration on</p>\n</li><li>count (Number, optional): <p>The number of how many results should be returned.</p>\n</li></ul>"
                }
            ],
            "returnTypes": [
                "dojo/_base/Deferred",
                "undefined"
            ],
            "summary": "<p>Stores an object. This will trigger a PUT request to the server\nif the object has an id, otherwise it will trigger a POST request.</p>\n"
        },
        {
            "name": "query",
            "scope": "prototype",
            "types": [
                "function"
            ],
            "from": "dojo/store/JsonRest",
            "parameters": [
                {
                    "name": "query",
                    "types": [
                        "Object"
                    ],
                    "usage": "required",
                    "summary": "<p>The query to use for retrieving objects from the store.</p>\n"
                },
                {
                    "name": "options",
                    "types": [
                        "Object"
                    ],
                    "usage": "optional",
                    "summary": "<p>The optional arguments to apply to the resultset.</p>\n",
                    "description": "<p>An object with the following properties:</p><ul><li>headers (Object, optional): <p>Additional headers to send along with the request.</p>\n</li><li>id (String|Number, optional): <p>Indicates the identity of the object if a new object is created</p>\n</li><li>before (Object, optional): <p>If the collection of objects in the store has a natural ordering,\nthis indicates that the created or updated object should be placed before the\nobject specified by the value of this property. A value of null indicates that the\nobject should be last.</p>\n</li><li>parent: <p>If the store is hierarchical (with single parenting) this property indicates the\nnew parent of the created or updated object.</p>\n</li><li>overwrite (Boolean, optional): <p>If this is provided as a boolean it indicates that the object should or should not\noverwrite an existing object. A value of true indicates that a new object\nshould not be created, the operation should update an existing object. A\nvalue of false indicates that an existing object should not be updated, a new\nobject should be created (which is the same as an add() operation). When\nthis property is not provided, either an update or creation is acceptable.</p>\n</li><li>sort (dojo/store/api/Store.SortInformation[], optional): <p>A list of attributes to sort on, as well as direction\nFor example:\n\n</p>\n[{attribute:&quot;price, descending: true}].\n<p>If the sort parameter is omitted, then the natural order of the store may be\n\n</p>\n<p>applied if there is a natural order.</p>\n</li><li>start (Number, optional): <p>The first result to begin iteration on</p>\n</li><li>count (Number, optional): <p>The number of how many results should be returned.</p>\n</li></ul>"
                }
            ],
            "returnTypes": [
                "dojo/store/api/Store.QueryResults",
                "undefined"
            ],
            "returnDescription": "<p>The results of the query, extended with iterative methods.</p>\n",
            "summary": "<p>Queries the store for objects. This will trigger a GET request to the server, with the\nquery added as a query string.</p>\n"
        },
        {
            "name": "remove",
            "scope": "prototype",
            "types": [
                "function"
            ],
            "from": "havok/store/JsonRest",
            "parameters": [
                {
                    "name": "id",
                    "types": [
                        "Number"
                    ],
                    "usage": "required",
                    "summary": "<p>The identity to use to delete the object</p>\n"
                },
                {
                    "name": "options",
                    "types": [
                        "__HeaderOptions"
                    ],
                    "usage": "optional",
                    "summary": "<p>HTTP headers.</p>\n"
                }
            ],
            "returnTypes": [
                "undefined"
            ],
            "summary": "<p>Deletes an object by its identity. This will trigger a DELETE request to the server.</p>\n"
        },
        {
            "name": "transaction",
            "scope": "prototype",
            "types": [
                "function"
            ],
            "from": "dojo/store/api/Store",
            "parameters": [],
            "returnTypes": [
                "dojo/store/api/Store.Transaction"
            ],
            "returnDescription": "<p>This represents the new current transaction.</p>\n",
            "summary": "<p>Starts a new transaction.\nNote that a store user might not call transaction() prior to using put,\ndelete, etc. in which case these operations effectively could be thought of\nas &quot;auto-commit&quot; style actions.</p>\n"
        }
    ]
}